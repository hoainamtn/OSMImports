<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanaheimr.Illias</name>
    </assembly>
    <members>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1">
            <summary>
            A factory which uses reflection to generate a appropriate
            implementation of T for you.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.SearchingFor">
            <summary>
            Returns the Name of the interface T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.RegisteredNames">
            <summary>
            Returns an enumeration of the names of all registered types of T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.RegisteredTypes">
            <summary>
            Returns an enumeration of activated instances of all registered types of T.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.Count">
            <summary>
            Returns the number of registered implementations of the interface T.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.#ctor">
            <summary>
            Create a new AutoDiscovery instance and start the discovery.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.#ctor(System.Boolean,System.Func{`0,System.String})">
            <summary>
            Create a new AutoDiscovery instance. An automatic discovery
            can be avoided.
            </summary>
            <param name="Autostart">Automatically start the reflection process.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.FindAndRegister(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{`0,System.String})">
            <summary>
            Searches all matching files at the given paths for classes implementing the interface &lt;T&gt;.
            </summary>
            <param name="ClearTypeDictionary">Clears the TypeDictionary before adding new implementations.</param>
            <param name="Paths">An enumeration of paths to search for implementations.</param>
            <param name="FileExtensions">A enumeration of file extensions for filtering.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscovery`1.TryGetInstance(System.String,`0@)">
            <summary>
            Attempts to get an instance associated with the identificator.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException">
            <summary>
            The class for all errors within the AutoDiscovery&lt;T&gt; class
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.AutoDiscoveryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message and a reference to the inner exception that is
            the cause of this exception.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
            <param name="myInnerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.BooleanComment">
            <summary>
            A boolean with a comment.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.BooleanComment.Boolean">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.BooleanComment.Comment">
            <summary>
            The comment text.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.BooleanComment.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new boolean with a comment.
            </summary>
            <param name="myBoolean">The boolean value.</param>
            <param name="myComment">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.BooleanComment.op_Implicit(org.GraphDefined.Vanaheimr.Illias.BooleanComment)~System.Boolean">
            <summary>
            Convert this object to a Boolean.
            </summary>
            <param name="BooleanWithComment">A BooleanComment object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.BooleanComment.True">
            <summary>
            Will return a value of 'true' without any comment text.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Assign a KeyValuePair to the given IProperties object.
            If a value already exists for this key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePair">A KeyValuePair of type string and object</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Assign the given enumeration of KeyValuePairs to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePairs">A enumeration of KeyValuePairs of type string and object</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.SetProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Assign the given IDictionary to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="IDictionary">A IDictionary of type TKey and TValue</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesExtensions.Remove``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Remove the given KeyValuePair.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyAddingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be added.</param>
            <param name="Value">The value of the property to be added.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyAddedEventHandler`2">
            <summary>
            An event handler called whenever a property value was added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the added property.</param>
            <param name="Value">The value of the added property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyChangingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be changed.</param>
            <param name="OldValue">The old value of the property to be changed.</param>
            <param name="NewValue">The new value of the property to be changed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyChangedEventHandler`2">
            <summary>
            An event handler called whenever a property value was changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the changed property.</param>
            <param name="OldValue">The old value of the changed property.</param>
            <param name="NewValue">The new value of the changed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyRemovingEventHandler`2">
            <summary>
            An event handler called whenever a property will be removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be removed.</param>
            <param name="Value">The value of the property to be removed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertyRemovedEventHandler`2">
            <summary>
            An event handler called whenever a property was removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the removed property.</param>
            <param name="Value">The value of the removed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyAdding">
            <summary>
            Called whenever a property value will be added.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyAdded">
            <summary>
            Called whenever a property value was added.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyChanging">
            <summary>
            Called whenever a property value will be changed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyChanged">
            <summary>
            Called whenever a property value was changed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyRemoving">
            <summary>
            Called whenever a property value will be removed.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.OnPropertyRemoved">
            <summary>
            Called whenever a property value was removed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Set(`0,`1)">
            <summary>
            Add a KeyValuePair to the graph element.
            If a value already exists for the given key, then the previous value is overwritten.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(`0)">
            <summary>
            Removes all KeyValuePairs associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(`0,`1)">
            <summary>
            Remove the given key and value pair.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IProperties`2.Remove(org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Remove all KeyValuePairs specified by the given KeyValueFilter.
            </summary>
            <param name="KeyValueFilter">A delegate to remove properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs removed by the given KeyValueFilter before their removal.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IPropertiesInitializer`2">
            <summary>
            A delegate for IProperties initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">The properties object.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.IdKey">
            <summary>
            The property key of the identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.RevIdKey">
            <summary>
            The property key of the revision identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.LabelKey">
            <summary>
            The property key of the label.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Keys">
            <summary>
            An enumeration of all property keys.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Values">
            <summary>
            An enumeration of all property values.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.ContainsKey(`0)">
            <summary>
            Determines if the given key exists.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.ContainsValue(`1)">
            <summary>
            Determines if the given value exists.
            </summary>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Contains(`0,`1)">
            <summary>
            Determines if the given key and value exists.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the given KeyValuePair exists.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.Item(`0)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.TryGetProperty(`0,`1@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.TryGetProperty``1(`0,``0@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <typeparam name="T">Check if the value is of the given type.</typeparam>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties`2.GetProperties(org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{`0,`1})">
            <summary>
            Return a filtered enumeration of all KeyValuePairs.
            </summary>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs matching the given KeyValueFilter.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated property value of the given property key.</param>
            <param name="OnErrorFunc">A delegate to call for the associated property key when the key was not found.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetString``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDouble``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Func{``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Func{``0,``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetCastedProperty``3(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TCast">The casted type of the properety values.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate called for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{``0,``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{``1,``2})">
            <summary>
            Call the given func delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.FilteredKeys``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property keys.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.FilteredValues``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property values.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.CompareProperties``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1})">
            <summary>
            Compares the properties of two different IElement objects (vertices or edges).
            </summary>
            <param name="myIProperties1">A vertex or edge</param>
            <param name="myIProperties2">Another vertex or edge</param>
            <returns>true if both IElement objects carry the same properties</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0)">
            <summary>
            Return the object value associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(org.GraphDefined.Vanaheimr.Illias.Collections.IProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesException">
            <summary>
            An exception during property processing occurred!
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesException.#ctor(System.String,System.Exception)">
            <summary>
            An exception during property processing occurred!
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.IdentificationChangeException">
            <summary>
            Changing the Id property is not allowed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.IdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.RevIdentificationChangeException">
            <summary>
            Changing the RevId property is not allowed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.RevIdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the revision identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps">
            <summary>
            Extention methods for PropertiesMaps.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},org.GraphDefined.Vanaheimr.Illias.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables">
            <summary>
            Extention methods for PropertiesTables.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables.PTable``2(org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.PropertiesTables.PTable``2(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1">
            <summary>
            A thread-safe, lock-free queue.
            </summary>
            <typeparam name="T">The type of the values stored within the queue.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement">
            <summary>
            An element within a queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.Next">
            <summary>
            Return the next element within the queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.Value">
            <summary>
            Return the value stored within the element.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueElement.#ctor(`0)">
            <summary>
            Create a single queue element.
            </summary>
            <param name="Value">The value stored within the node.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.First">
            <summary>
            The first element of the queue.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.MaxNumberOfElements">
            <summary>
            The maximal number of values within the queue.
            RemoveOldestQueueElement() will be called to remove dispensable elements.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Count">
            <summary>
            The current number of elements within the queue.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.QueueDelegate">
            <summary>
            A delegate called whenever an element was added to or removed from the queue.
            </summary>
            <param name="Sender">The sender of the event.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.OnAdded">
            <summary>
            Called whenever an element was added to the queue.
            </summary>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.OnRemoved">
            <summary>
            Called whenever an element of the queue was removed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.#ctor(System.UInt64)">
            <summary>
            Create a new thread-safe, lock-free queue.
            </summary>
            <param name="MaxNumberOfElements">The maximal number of values within the queue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Push(`0)">
            <summary>
            Push a new value into the queue.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Peek">
            <summary>
            Return the oldest value of the queue without removing it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.Pop">
            <summary>
            Return the oldest value of the queue and remove it.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Collections.TSQueue`1.GetEnumerator">
            <summary>
            Get an enumerator for the queue..
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDictionaryInitializer`2">
            <summary>
            A delegate for IDictionary initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2">
            <summary>
            A simple implementation of a immutable map.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2.#ctor">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ImmutableMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
            <param name="InternalIDictionary">An user-defined internal map.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IImmutableMap`2">
            <summary>
            Provides a generic immutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IMap`2">
            <summary>
            Provides a generic mutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.CompareTo(org.GraphDefined.Vanaheimr.Illias.MultiString)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="OtherMultiString">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.Equals(org.GraphDefined.Vanaheimr.Illias.MultiString)">
            <summary>
            Compares two MultiStrings for equality.
            </summary>
            <param name="MultiString">A MultiString to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MultiString.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1">
            <summary>
            A reactive set.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Count">
            <summary>
            The number of items stored within this reactive set.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemAddedDelegate">
            <summary>
            A delegate called whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
            <param name="Timestamp">The timestamp when this change was detected.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemAdded">
            <summary>
            An event fired whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemRemovedDelegate">
            <summary>
            A delegate called whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
            <param name="Timestamp">The timestamp when this change was detected.</param>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.OnItemRemoved">
            <summary>
            An event fired whenever the aggregated dynamic status of all subordinated EVSEs changed.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.#ctor(`0[])">
            <summary>
            Create a new reactive set storing on the given items.
            </summary>
            <param name="Items">An optional array of items to store.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new reactive set storing on the given items.
            </summary>
            <param name="Items">An optional enumeration of items to store.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Add(`0[])">
            <summary>
            Add the given array of items to the reactive set.
            </summary>
            <param name="Items">An array of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the given enumeration of items to the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.AddAndReturn(`0)">
            <summary>
            Add the given item to the reactive set and return it.
            </summary>
            <param name="Item">An item.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Contains(`0)">
            <summary>
            Determines whether the reactive set contains the given item.
            </summary>
            <param name="Item">An item.</param>
            <returns>true if the reactive set contains the specified item; otherwise, false.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Remove(`0[])">
            <summary>
            Remove the given array of items from the reactive set.
            </summary>
            <param name="Items">An array of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove the given enumeration of items from the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove the given enumeration of items from the reactive set.
            </summary>
            <param name="Items">An enumeration of items.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_LessThan(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0},org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ReactiveSet1">A ReactiveSet.</param>
            <param name="ReactiveSet2">Another ReactiveSet.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.GetEnumerator">
            <summary>
            Enumerate the reactive list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the reactive list.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.Equals(org.GraphDefined.Vanaheimr.Illias.ReactiveSet{`0})">
            <summary>
            Compares two reactive sets for equality.
            </summary>
            <param name="ReactiveSet">A reactive set to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ReactiveSet`1.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption">
            <summary>
            A fluent interface to add command line parser options.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.ShortOption">
            <summary>
            The short option.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.LongOption">
            <summary>
            The long option.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.RegularExpression">
            <summary>
            An optional regular expression for verification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verification">
            <summary>
            An optional delegate for verification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Action">
            <summary>
            The action delegate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(System.Char,org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="ShortOption">The short option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.#ctor(System.String,org.GraphDefined.Vanaheimr.Illias.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="LongOption">The long option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Short(System.Char)">
            <summary>
            Set the short option.
            </summary>
            <param name="ShortOption">The short option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Long(System.String)">
            <summary>
            Set the long option.
            </summary>
            <param name="LongOption">The long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verify(System.String)">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="RegularExpression">A regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Verify(System.Func{System.String,System.Boolean})">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="Delegate">A delegate for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Do(System.Action{System.String})">
            <summary>
            Set the action delegate.
            </summary>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParserOption.Apply">
            <summary>
            Apply/store this command line parser option.
            </summary>
            <returns></returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CommandLineParser">
            <summary>
            A command line parser.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.#ctor">
            <summary>
            Create a new command line parser.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddShortOption(System.Char)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="ShortOption">Add a short option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddLongOption(System.String)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="LongOption">Add a long option.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.Char,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character,
            e.g. "o" for a "-o" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="Delegate">What to do with the value of the character option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given string,
            e.g. "output" for a "--output" command line option.
            </summary>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the string option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.AddOption(System.Char,System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character and string,
            e.g. "o" and "output" for a "-o" and "--output" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.CommandLineParser.Parse(System.String[])">
            <summary>
            Parse the given array of arguments.
            </summary>
            <param name="Arguments">An array of arguments.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.#ctor">
            <summary>
            Create a new grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.GroupedCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IGroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.CountedPredicate`1">
            <summary>
            Represents the method that defines a set of criteria and determines whether
            the specified object meets those criteria.
            </summary>
            <typeparam name="T">The type of the object to compare.</typeparam>
            <param name="Object">The object to compare.</param>
            <param name="Counter">An object counter. Starts with 1!</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ItemFilter`1">
            <summary>
            A delegate to filter items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="Item">An item.</param>
            <returns>True if the item should be returned; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.KeyValueFilter`2">
            <summary>
            A delegate to filter KeyValuePairs based on their keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>True if the KeyValuePair should be returned; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.KeyValueMapper`2">
            <summary>
            A delegate to map a given KeyValuePair to another KeyValuePair.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="KeyValuePair">A KeyValuePair.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDescription`1">
            <summary>
            Provides a description of something.
            </summary>
            <typeparam name="TDescription">The type of the description.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IDescription`1.Description">
            <summary>
            Provides a description of something.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell">
            <summary>
            Some utilities to help in the hell of endianness.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int16)">
            <summary>
            Swap the byte representation of the given Int16 value.
            </summary>
            <param name="Value">A Int16.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt16)">
            <summary>
            Swap the byte representation of the given UInt16 value.
            </summary>
            <param name="Value">A UInt16.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int32)">
            <summary>
            Swap the byte representation of the given Int32 value.
            </summary>
            <param name="Value">A Int32.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt32)">
            <summary>
            Swap the byte representation of the given UInt32 value.
            </summary>
            <param name="Value">A UInt32.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.Int64)">
            <summary>
            Swap the byte representation of the given Int64 value.
            </summary>
            <param name="Value">A Int64.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Endianness.EndiannessHell.SwapBytes(System.UInt64)">
            <summary>
            Swap the byte representation of the given UInt64 value.
            </summary>
            <param name="Value">A UInt64.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.kWh">
            <summary>
            A kilo watt hour.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kWh.Value">
            <summary>
            The value of the kWh in kilo watts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.#ctor(System.Single)">
            <summary>
            Create a new kWh.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Parse(System.String)">
            <summary>
            Parse the given string as a kWh.
            </summary>
            <param name="Text">A text representation of a kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Parse(System.Single)">
            <summary>
            Parse the given number as a kWh.
            </summary>
            <param name="Number">A numeric representation of a kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.kWh@)">
            <summary>
            Parse the given string as a kWh.
            </summary>
            <param name="Text">A text representation of a kWh.</param>
            <param name="kWh">The parsed kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.TryParse(System.Single,org.GraphDefined.Vanaheimr.Illias.kWh@)">
            <summary>
            Parse the given number as a kWh.
            </summary>
            <param name="Number">A numeric representation of a kWh.</param>
            <param name="kWh">The parsed kWh.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kWh.Clone">
            <summary>
            Clone this kWh.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Equality(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Inequality(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_LessThan(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Addition(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Accumulates two kWhs.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.kWh,org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Substracts two kWhs.
            </summary>
            <param name="kWh1">A kWh.</param>
            <param name="kWh2">Another kWh.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.CompareTo(org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kWh">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.Equals(org.GraphDefined.Vanaheimr.Illias.kWh)">
            <summary>
            Compares two kWhs for equality.
            </summary>
            <param name="kWh">A kWh to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kWh.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.kW">
            <summary>
            A kilo watt.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kW.Value">
            <summary>
            The value of the kW in kilo watts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.#ctor(System.Single)">
            <summary>
            Create a new kW.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Parse(System.String)">
            <summary>
            Parse the given string as a kW.
            </summary>
            <param name="Text">A text representation of a kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Parse(System.Single)">
            <summary>
            Parse the given number as a kW.
            </summary>
            <param name="Number">A numeric representation of a kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.kW@)">
            <summary>
            Parse the given string as a kW.
            </summary>
            <param name="Text">A text representation of a kW.</param>
            <param name="kW">The parsed kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.TryParse(System.Single,org.GraphDefined.Vanaheimr.Illias.kW@)">
            <summary>
            Parse the given number as a kW.
            </summary>
            <param name="Number">A numeric representation of a kW.</param>
            <param name="kW">The parsed kW.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.kW.Clone">
            <summary>
            Clone this kW.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Equality(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Inequality(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_LessThan(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Addition(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Accumulates two kWs.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.kW,org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Substracts two kWs.
            </summary>
            <param name="kW1">A kW.</param>
            <param name="kW2">Another kW.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.CompareTo(org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="kW">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.Equals(org.GraphDefined.Vanaheimr.Illias.kW)">
            <summary>
            Compares two kWs for equality.
            </summary>
            <param name="kW">A kW to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.kW.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IId">
            <summary>
            The common interface of a datastructure used as an unique identification.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IId`1">
            <summary>
            The common interface of a datastructure used as an unique identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IId`1.Id">
            <summary>
            The unique identification of the data structure.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute">
            <summary>
            Tag a struct, class or property as 'mandatory'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute.Tags">
            <summary>
            Additional tags of the 'mandatory'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.MandatoryAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'mandatory'-tag having the given tags.
            </summary>
            <param name="Tags">Additional tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OnPropertyChangedDelegate">
            <summary>
            A delegate called whenever a property of the given object changed.
            </summary>
            <param name="Timestamp">The timestamp of the event.</param>
            <param name="Sender">The changed object.</param>
            <param name="PropertyName">The name of the changed property.</param>
            <param name="OldValue">The old value of the changed property.</param>
            <param name="NewValue">The new value of the changed property.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute">
            <summary>
            Tag a struct, class or property as 'dynamic'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute.Tags">
            <summary>
            Additional tags of the 'mandatory'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DynamicAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'dynamic'-tag having the given tags.
            </summary>
            <param name="Tags">Some tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute">
            <summary>
            Tag a struct, class or property as 'optional'.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute.Tags">
            <summary>
            Additional tags of the 'mandatory'-tag.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.OptionalAttribute.#ctor(System.String[])">
            <summary>
            Create a new 'optional'-tag having the given tags.
            </summary>
            <param name="Tags">Some tags.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.OnExceptionDelegate">
            <summary>
            A delegate called whenever an exception occured.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ExceptionHelpers">
            <summary>
            Some exception helpers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ExceptionHelpers.CheckNull(System.Object,System.String)">
            <summary>
            Checks if the given item is null. 
            </summary>
            <param name="Object">Any object.</param>
            <param name="ObjectName">The name of the object.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ByteExtensions">
            <summary>
            Extensions for byte and byte arrays.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes into its hexadecimal string representation.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.HexStringToByteArray(System.String)">
            <summary>
            Convert a hex representation of an array of bytes
            back into an array of bytes.
            </summary>
            <param name="HexValue">hex representation of a byte array.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.Reverse(System.Byte[])">
            <summary>
            Reverse the given byte array.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.Reverse(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Reverse the given byte array.
            </summary>
            <param name="ByteArray">An array of bytes.</param>
            <param name="Skip">Skip the given number of bytes in the beginning.</param>
            <param name="Take">Take the given number of bytes.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt16s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int16s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt16s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt16s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int32s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt32s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToInt64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Int64s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToUInt64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of UInt64s.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToSingles(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Singles.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDoubles(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of enumerated bytes into an enumeration of Doubles.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.UNIXTime">
            <summary>
            The beginning of the UNIX universe.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDateTime32s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of four enumerated bytes into an enumeration of DateTimes.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.ByteExtensions.ToDateTime64s(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Byte}},System.Boolean)">
            <summary>
            Converts the given enumeration of eight enumerated bytes into an enumeration of DateTimes.
            </summary>
            <param name="IEnumerable">An enumeration of enumerated bytes.</param>
            <param name="NetworkByteOrder">Whether the bytes are enumerated in network byte order (default) or not.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions">
            <summary>
            Extensions to the DateTime class.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.UnixEpoch">
            <summary>
            The UNIX epoch.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Convert the given DateTime object to UNIX timestamp.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <returns>The seconds since 1. January 1970</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.FromUnixTimestamp(System.Int64)">
            <summary>
            Convert the given UNIX timestamp to a .NET DateTime object.
            </summary>
            <param name="UnixTimestamp">A UNIX timestamp (seconds since 1. January 1970)</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToIso8601(System.DateTime,System.Boolean)">
            <summary>
            Convert the given DateTime object to an ISO 8601 datetime string.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <param name="Fractions">Iclude the fractions of seconds.</param>
            <returns>The DateTime formated as "yyyy-MM-ddTHH:mm:ss.fff" + "Z"</returns>
            <example>2014-02-01T15:45:00.000Z</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToIso8601WithOffset(System.DateTime,System.Boolean)">
            <summary>
            Convert the given DateTime object to an ISO 8601 datetime string with timezone offset.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <param name="Fractions">Iclude the fractions of seconds.</param>
            <returns>The DateTime formated as "yyyy-MM-ddTHH:mm:ss.fffzzz"</returns>
            <example>2014-02-01T15:45:00.000+00:00</example>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DateTimeExtensions.ToRfc1123(System.DateTime)">
            <summary>
            Convert the given DateTime object to an RFC 1123 datetime string.
            </summary>
            <param name="DateTime">A DateTime object.</param>
            <returns>The DateTime formated as e.g. "Wed, 24 Nov 2016 09:44:55 GMT"</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DebugX">
            <summary>
            Helpers for the normal Debug class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.String[])">
            <summary>
            Write the current timestamp and given text to Debug.
            </summary>
            <param name="Text">The text to be logged.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.LogT(System.String[])">
            <summary>
            Write the current timestamp and given text to Debug.
            </summary>
            <param name="Text">The text to be logged.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.Exception,System.String)">
            <summary>
            Write the current timestamp and given exception to Debug.
            </summary>
            <param name="Exception">The exception.</param>
            <param name="Source">The source of the exception.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DebugX.Log(System.String,System.Exception)">
            <summary>
            Write the current timestamp and given exception to Debug.
            </summary>
            <param name="Message">An exception message..</param>
            <param name="Exception">The exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.EnumExtensions">
            <summary>
            Extension methods for enums.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions">
            <summary>
            Extensions to the IComparable interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLessThan``1(``0,``0)">
            <summary>
            Checks if the first value is less than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLessThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is less than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than or equals the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLargerThan``1(``0,``0)">
            <summary>
            Checks if the first value is larger than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than the second value; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IComparableExtensions.IsLargerThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is larger than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than or equals the second value; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions">
            <summary>
            Extension methods for the IDictionary interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnDictionary``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an element to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The changed dictionary.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an element to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The changed dictionary.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKeyValuePair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element as key value pair.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKeyValuePair``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element as key value pair.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="Key">The element key.</param>
            <param name="Value">The element value.</param>
            <returns>The element value.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IDictionaryExtensions.AddAndReturnValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Another way to add an value to a dictionary.
            </summary>
            <param name="Dictionary">A dictionary.</param>
            <param name="KeyCreator">A delegate providing the key.</param>
            <param name="Value">The element value.</param>
            <returns>The element value.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions">
            <summary>
            Extensions to the IEnumerable interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.StdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AverageAndStdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The mean and stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration,
            but does not fail if any parameter is null.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEachCounted``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.UInt64},System.UInt64)">
            <summary>
            Calls the given delegate for each element of the enumeration
            and count the number of elements.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration and a counter.</param>
            <param name="Counter">The initial value of the counter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="First">An action to call for the first element of the enumeration.</param>
            <param name="Remaining">An action to call for each element except the first element of the enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SelectCounted``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.UInt64,``0,``1},System.UInt64)">
            <summary>
            Calls the given delegate for each element of the enumeration
            and count the number of elements.
            </summary>
            <typeparam name="T1">The type of the enumeration.</typeparam>
            <typeparam name="T2">The type of the result enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Delegate">A delegate to call for a counter and each element of the enumeration.</param>
            <param name="Counter">The initial value of the counter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt32})">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt64})">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt32})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.UInt64})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int64})">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The given enumeration is null or empty.
            </summary>
            <typeparam name="T">The type of the elements of the enumeration.</typeparam>
            <param name="Enumerable">An enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
            <param name="DefaultValues">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safely filters the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Filter">The delegate to filter the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SelectIgnoreErrors``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
            <param name="DefaultValues">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.MapReduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="MapDelegate">The delegate to select the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.SafeSelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Safely selects the given enumeration.
            </summary>
            <typeparam name="TSource">The type of the enumeration.</typeparam>
            <typeparam name="TResult">The type of the resulting enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of an enumeration.</param>
            <param name="SelectionDelegate">The delegate to select the given enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="AggreationDelegate">The delegate to aggregate the given enumeration.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0},System.Func{``0,``0,``0},``0,``0)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements the default value will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateWith``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.String)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements an empty string will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="Seperator">A string as element seperator.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.AggregateWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Safely aggregates the given enumeration. If the enumeration is null
            or has no elements an empty string will be returned.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="Enumeration">An enumeration.</param>
            <param name="Seperator">A string as element seperator.</param>
            <param name="DefaultValue">The default value to return for an empty enumeration.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ConsumeAll``1(System.Collections.IEnumerator)">
            <summary>
            Consume all elements of the given enumerator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumerator">An IEnumerator.</param>
            <returns>An enumerable of T.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IEnumerableExtensions.ConsumeAll``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Consume all elements of the given enumerator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumerator">An IEnumerator.</param>
            <returns>An enumerable of T.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IListExtensions">
            <summary>
            Extension methods for the IList interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Another way to add an element to a list.
            </summary>
            <param name="List">A list of elements.</param>
            <param name="Element">The element to be added to the list.</param>
            <returns>The changed list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Another way to add an element to a list.
            </summary>
            <param name="List">A list of elements.</param>
            <param name="Elements">Another list to be added to this list.</param>
            <returns>The changed list.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.AddAndReturnElement``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Another way to add an value to a list.
            </summary>
            <param name="List">A list of elements.</param>
            <param name="Element">The element to be added to the list.</param>
            <returns>The added element.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.ReverseAndReturn``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverse and return the given list;
            </summary>
            <param name="List">A list of elements.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.RemoveAndReturnFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and return first element of the given list;
            </summary>
            <param name="List">A list of elements.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IListExtensions.RemoveAndReturnLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and return last element of the given list;
            </summary>
            <param name="List">A list of elements.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions">
            <summary>
            Extensions methods for integers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.RandomExtensions">
            <summary>
            Extension methods for System.Random.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.GetBytes(System.Random,System.UInt16)">
            <summary>
            Get an array of random bytes.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="NumberOfBytes">The number of random bytes to genrate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RandomExtensions.GetString(System.Random,System.UInt16)">
            <summary>
            Get random string of the given length.
            </summary>
            <param name="Random">The source of randomness.</param>
            <param name="Length">The the length of the string.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StreamExtensions">
            <summary>
            Extensions to the Stream class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StreamExtensions.SeekAndCopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads the bytes from the given stream and writes them to another stream.
            May skip the given number of bytes.
            </summary>
            <param name="SourceStream">The source stream.</param>
            <param name="DestinationStream">The destination stream.</param>
            <param name="SkipFromBeginning">Anumber of bytes to skip from the beginning of the source stream.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StringBuilderExtentions">
            <summary>
            Extensions to the StringBuilder class.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StringExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the given string is null or empty.
            </summary>
            <param name="GivenString">The string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Indicates whether the given string is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IfNotNullOrEmpty(System.String,System.Func{System.String,System.String})">
            <summary>
            Mappes the given string if it is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Mapper">A string mapper delegate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullAndContains(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified Substring
            occurs within the given string.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring to search for.</param>
            <returns>True if the value parameter occurs within this string.</returns>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StringExtensions.DoubleNewLine">
            <summary>
            NewLine but twice.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the given string.
            </summary>
            <param name="String">The string to reverse.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveQuotes(System.String)">
            <summary>
            Removes leading and/or tailing (double) quotes.
            </summary>
            <param name="String">The string to check.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveAllBefore(System.String,System.String)">
            <summary>
            Removes everything from the string before the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.RemoveAllAfter(System.String,System.String)">
            <summary>
            Removes everything from the string after the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.SubstringMax(System.String,System.Int32)">
            <summary>
            Return a substring of the given maximum length.
            </summary>
            <param name="Text">A text.</param>
            <param name="Length">The maximum length of the substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNullOrEmpty(System.String,System.Action{System.String},System.String)">
            <summary>
            Call the given delegate whether the specified string is null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Delegate">A delegate to call whenever the given string is null or empty.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.IsNotNullOrEmpty(System.String,System.Action{System.String},System.String)">
            <summary>
            Call the given delegate whether the specified string is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="Delegate">A delegate to call whenever the given string is null or empty.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.FailIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException whenever the given string is null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="ExceptionMessage">An optional message to be added to the exception.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.FailIfNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException whenever the given string is not null or empty.
            </summary>
            <param name="GivenString">The string.</param>
            <param name="ExceptionMessage">An optional message to be added to the exception.</param>
            <param name="ParameterName">The parameter name of the given string (CallerMemberName).</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.AggregateIndentedLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts the given enumeration of strings into an enumeration of key-value-pairs.
            </summary>
            <param name="Text">An enumeration of strings.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StringExtensions.ToKeyValuePairs(System.Collections.Generic.IEnumerable{System.String},System.Char[])">
            <summary>
            Converts the given enumeration of strings into an enumeration of key-value-pairs.
            </summary>
            <param name="Text">An enumeration of strings.</param>
            <param name="Delimiters">The delimiter(s) between keys and values.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TypeExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TypeExtensions.GetRecursiveInterfaces(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Traverses the interface inheritance tree and collects all found interfaces.
            </summary>
            <param name="Interface">The starting innterface.</param>
            <param name="AllInterfaces">A list of all interfaces found.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.XElementExtensions">
            <summary>
            Extensions to the XElement class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="NestedXName">The nested System.Xml.Linq.XName.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.ElementValueOrFail(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) child element with the
            specified System.Xml.Linq.XName or throw an optional exception.
            </summary>
            <param name="ParentXElement">The XML parent XML element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.AttributeValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="DefaultValue">A default value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.AttributeValueOrFail(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrFail``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrDefault``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.XElementExtensions.MapAttributeValueOrNullable``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},System.String)">
            <summary>
            Return the value of the first (in document order) attribute with the
            specified System.Xml.Linq.XName or the given default value.
            </summary>
            <param name="ParentXElement">The XML parent element.</param>
            <param name="XName">The System.Xml.Linq.XName to match.</param>
            <param name="ExceptionMessage">An optional exception message.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ConsoleX">
            <summary>
            Extension methods for Console.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TaskExtensions">
            <summary>
            Extensions to the Task class.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TaskExtensions.CallSideeffect``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Call the given side effect delegate and continue to process the given Task afterwards.
            </summary>
            <typeparam name="T">The type of the Task.</typeparam>
            <param name="Task">The type of the result produced by the continuation.</param>
            <param name="Action">An action to run when the System.Threading.Tasks.Task completes. When run, the delegate will be passed the completed task as an argument.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1">
            <summary>
            A 1-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Left">
            <summary>
            The left-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Right">
            <summary>
            The right-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.#ctor(`0,`0)">
            <summary>
            Create a 1-dimensional line of type T.
            </summary>
            <param name="Left">The left-coordinate of the line.</param>
            <param name="Right">The right-coordinate of the line.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Contains(`0)">
            <summary>
            Checks if the given element is located on this line.
            </summary>
            <param name="Element">An element.</param>
            <returns>True if the element is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line is located
            within this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line is located within this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line shares some
            area with this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line shares some area with this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Compares two lines for equality.
            </summary>
            <param name="ILine">A line to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line1D`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1">
            <summary>
            A circle of type T.
            </summary>
            <typeparam name="T">The internal type of the circle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(`0,`0,`0)">
            <summary>
            Create a circle of type T.
            </summary>
            <param name="X">The x-coordinate of the circle.</param>
            <param name="Y">The y-coordinate of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0)">
            <summary>
            Create a circle of type T.
            </summary>
            <param name="Center">The center of the circle.</param>
            <param name="Radius">The radius of the circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Creates a circumcircle of type T based on three pixels.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.IsInCircle(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given first pixel is within the circle
            defined by the remaining three edge pixels.
            </summary>
            <param name="Pixel">The pixel to be checked.</param>
            <param name="EdgePixel1">The first edge pixel defining a circle.</param>
            <param name="EdgePixel2">The second edge pixel defining a circle.</param>
            <param name="EdgePixel3">The third edge pixel defining a circle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this circle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this circle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle is located
            within this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle shares some
            area with this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle shares some area with this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Circle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Circle1">A Circle&lt;T&gt;.</param>
            <param name="Circle2">Another Circle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="ICircle">A circle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Circle`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1">
            <summary>
            A 2-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.X1">
            <summary>
            The fist x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Y1">
            <summary>
            The first y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.X2">
            <summary>
            The second x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Y2">
            <summary>
            The second y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Pixel1">
            <summary>
            The left/top pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Pixel2">
            <summary>
            The right/bottom pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Gradient">
            <summary>
            The gradient/inclination of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.YIntercept">
            <summary>
            The interception of the line with the y-axis.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Center">
            <summary>
            The center pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Vector">
            <summary>
            The vector of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Normale">
            <summary>
            The normale vector of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="X1">The first x-coordinate of the line.</param>
            <param name="Y1">The first y-coordinate of the line.</param>
            <param name="X2">The second x-coordinate of the line.</param>
            <param name="Y2">The second y-coordinate of the line.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0,`0)">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="X">The x-component.</param>
            <param name="Y">The y-component.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a 2-dimensional line of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located on this line.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.IntersectsWith(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,System.Boolean)">
            <summary>
            Checks if and where the given lines intersect.
            </summary>
            <param name="Line">A line.</param>
            <param name="Pixel">The intersection of both lines.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Line1">A Line&lt;T&gt;.</param>
            <param name="Line2">Another Line&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0})">
            <summary>
            Compares two lines for equality.
            </summary>
            <param name="ILine">A line to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Line2D`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1">
            <summary>
            A pixel of type T.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.#ctor(`0,`0)">
            <summary>
            Create a pixel of type T.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Swap(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@)">
            <summary>
            Swaps two pixels.
            </summary>
            <param name="Pixel1">The first pixel.</param>
            <param name="Pixel2">The second pixel.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            pixel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this pixel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            A method to calculate the distance between
            this and another pixel of type T.
            </summary>
            <param name="Pixel">A pixel of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Pixel1">A Pixel&lt;T&gt;.</param>
            <param name="Pixel2">Another Pixel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Pixel1">A Pixel&lt;T&gt;.</param>
            <param name="Pixel2">Another Pixel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelT">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Compares two pixels for equality.
            </summary>
            <param name="IPixel">A pixel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector`1">
            <summary>
            A delegate selecting which pixels to return.
            </summary>
            <typeparam name="T">The internal datatype of the pixel.</typeparam>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2">
            <summary>
            A pixel of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.#ctor(`0,`0,`1)">
            <summary>
            Create a pixel of type T together with a value of type TValue.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PixelValuePair1">A PixelValuePair.</param>
            <param name="PixelValuePair2">Another PixelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="PixelValuePair1">A PixelValuePair.</param>
            <param name="PixelValuePair2">Another PixelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Compares two PixelValuePairs for equality.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.PixelValuePair`2.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1">
            <summary>
            A polygon of type T.
            </summary>
            <typeparam name="T">The internal type of the polygon.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Pixels">
            <summary>
            The pixels of the polygon.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the polygon.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}[])">
            <summary>
            Create a polygon of type T.
            </summary>
            <param name="Pixels">The pixels of the polygon.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPolygon">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon{`0})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="IPolygon">A polygon to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Polygon`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1">
            <summary>
            A rectangle of type T.
            </summary>
            <typeparam name="T">The internal type of the rectangle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Left">
            <summary>
            The left-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Top">
            <summary>
            The top-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Right">
            <summary>
            The right-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Bottom">
            <summary>
            The bottom-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Pixel1">
            <summary>
            The left/top pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Pixel2">
            <summary>
            The right/bottom pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Diameter">
            <summary>
            The length of the diagonale (diameter) of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Center">
            <summary>
            The center pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Diagonales">
            <summary>
            Return an enumeration of lines representing the diagonales of the rectangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Left">The left-coordinate of the rectangle.</param>
            <param name="Top">The top-coordinate of the rectangle.</param>
            <param name="Right">The right-coordinate of the rectangle.</param>
            <param name="Bottom">The bottom-coordinate of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Pixel1">The left/top pixel of the rectangle.</param>
            <param name="Pixel2">The right/bottom pixel of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`0,`0)">
            <summary>
            Create a rectangle of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the rectangle.</param>
            <param name="Width">The width of the rectangle.</param>
            <param name="Height">The height of the rectangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this rectangle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle is located
            within this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle shares some
            area with this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle shares some area with this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Rectangle1">A Rectangle&lt;T&gt;.</param>
            <param name="Rectangle2">Another Rectangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Rectangle1">A Rectangle&lt;T&gt;.</param>
            <param name="Rectangle2">Another Rectangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="IRectangle">A rectangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Rectangle`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1">
            <summary>
            A triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P1">
            <summary>
            The first pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P2">
            <summary>
            The second pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.P3">
            <summary>
            The third pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CircumCenter">
            <summary>
            Return the cirumcenter of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CircumCircle">
            <summary>
            Return the circumcircle of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the triangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a triangle of type T.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Triangle1">A Triangle&lt;T&gt;.</param>
            <param name="Triangle2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="ITriangle">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle{`0})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="ITriangle">A triangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Triangle`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2">
            <summary>
            A triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Create a triangle of type T.
            </summary>
            <param name="Pixel1">The first pixel of the triangle.</param>
            <param name="Pixel2">The second pixel of the triangle.</param>
            <param name="Pixel3">The third pixel of the triangle.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TriangleValuePair1">A Triangle&lt;T&gt;.</param>
            <param name="TriangleValuePair2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="TriangleValuePair1">A Triangle&lt;T&gt;.</param>
            <param name="TriangleValuePair2">Another Triangle&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IPixelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair{`0,`1})">
            <summary>
            Compares two triangles for equality.
            </summary>
            <param name="ITriangleValuePair">A triangle to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.TriangleValuePair`2.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1">
            <summary>
            A 2-dimensional vector of type T.
            </summary>
            <typeparam name="T">The internal type of the vector.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.X">
            <summary>
            The x-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Y">
            <summary>
            The y-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.NormVector">
            <summary>
            Return a normalized vector.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(`0,`0)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="X">The x-component of the vector.</param>
            <param name="Y">The y-component of the vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="X1">The first x-coordinate of the vector.</param>
            <param name="Y1">The first y-coordinate of the vector.</param>
            <param name="X2">The second x-coordinate of the vector.</param>
            <param name="Y2">The second y-coordinate of the vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Create a 2-dimensional vector of type T.
            </summary>
            <param name="Vector1">A vector of type T.</param>
            <param name="Vector2">A vector of type T.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Min(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to get the minimum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Max(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to get the maximum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to add vectors.
            </summary>
            <param name="Summands">An array of vectors.</param>
            <returns>The addition of all summands: v1 + v2 + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Sub(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to sub two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The subtraction of v2 from v1: v1 - v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Mul(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0}[])">
            <summary>
            A method to multiply vectors.
            </summary>
            <param name="Multiplicators">An array of vectors.</param>
            <returns>The multiplication of all multiplicators: v1 * v2 * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Mul2(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to multiply a vector by 2.
            </summary>
            <param name="v">A vector.</param>
            <returns>The multiplication of v by 2: (2*x, 2*y)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Div(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to divide two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The division of v1 by v2: v1 / v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Div2(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to divide a vector by 2.
            </summary>
            <param name="v">A vector.</param>
            <returns>The division of v by 2: v / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Pow(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate a Double raised to the specified power.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The values of v1 raised to the specified power of v2: v1^v2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Inv(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the inverse value of the given vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The inverse value of v: -v</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Abs(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the absolute value of the given vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The absolute value of v: (|a| |b|)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Sqrt(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the square root of the vector.
            </summary>
            <param name="v">A vector.</param>
            <returns>The square root of v: Sqrt(v)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Distance(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between two vectors.
            </summary>
            <param name="v1">A vector.</param>
            <param name="v2">A vector.</param>
            <returns>The distance between v1 and v2.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.IsParallelTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Determines if the given vector is parallel or
            antiparallel to this vector.
            </summary>
            <param name="Vector">A vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            vector and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this vector and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between
            this and another vector of type T.
            </summary>
            <param name="Vector">A vector of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Vector1">A Vector&lt;T&gt;.</param>
            <param name="Vector2">Another Vector&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="IVector">A vector to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Vector2D`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1">
            <summary>
            A cube of type T.
            </summary>
            <typeparam name="T">The internal type of the cube.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Left">
            <summary>
            The left-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Top">
            <summary>
            The top-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Front">
            <summary>
            Front
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Behind">
            <summary>
            Behind
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Width">
            <summary>
            The width of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Height">
            <summary>
            The height of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Depth">
            <summary>
            The depth of the cube.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Left">The left parameter.</param>
            <param name="Top">The top parameter.</param>
            <param name="Front">The front parameter.</param>
            <param name="Right">The right parameter.</param>
            <param name="Bottom">The bottom parameter.</param>
            <param name="Behind">The behind parameter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Voxel1">A Voxel of type T.</param>
            <param name="Voxel2">A Voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},`0,`0,`0)">
            <summary>
            Create a cube of type T.
            </summary>
            <param name="Voxel">A Voxel of type T in the upper left front corner of the cube.</param>
            <param name="Width">The width of the cube.</param>
            <param name="Height">The height of the cube.</param>
            <param name="Depth">The depth of the cube.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this cube.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this cube.
            </summary>
            <param name="IVoxel">A voxel of type T.</param>
            <returns>True if the voxel is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube is located
            within this cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <returns>True if the cube is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube shares some
            area with this cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <returns>True if the cube shares some area with this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Cube1">A Cube&lt;T&gt;.</param>
            <param name="Cube2">Another Cube&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Cube{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Cube1">A Cube&lt;T&gt;.</param>
            <param name="Cube2">Another Cube&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Compares two cubes for equality.
            </summary>
            <param name="ICube">A cube to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Cube`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1">
            <summary>
            A sphere of type T.
            </summary>
            <typeparam name="T">The internal type of the sphere.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Left">
            <summary>
            The left-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Top">
            <summary>
            The top-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Front">
            <summary>
            The front-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Center">
            <summary>
            The center of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Diameter">
            <summary>
            The diameter of the sphere.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Create a sphere of type T.
            </summary>
            <param name="Left">The left-coordinate of the sphere.</param>
            <param name="Top">The top-coordinate of the sphere.</param>
            <param name="Front">The front-coordinate of the sphere.</param>
            <param name="Radius">The radius parameter.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this sphere.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this sphere.
            </summary>
            <param name="Voxel">A voxel.</param>
            <returns>True if the voxel is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere is located
            within this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere shares some
            area with this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere shares some area with this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Sphere1">A Sphere&lt;T&gt;.</param>
            <param name="Sphere2">Another Sphere&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Sphere1">A Sphere&lt;T&gt;.</param>
            <param name="Sphere2">Another Sphere&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Compares two spheres for equality.
            </summary>
            <param name="ISphere">A sphere to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Sphere`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1">
            <summary>
            A voxel of type T.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Math">
            <summary>
            Mathoperation helpers.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Z">
            <summary>
            The Z-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.#ctor(`0,`0,`0)">
            <summary>
            Create a voxel of type T.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Z">The Z-coordinate.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.DistanceTo(`0,`0,`0)">
            <summary>
            A method to calculate the distance between this
            voxel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <param name="z">A z-coordinate of type T</param>
            <returns>The distance between this voxel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            A method to calculate the distance between
            this and another voxel of type T.
            </summary>
            <param name="IVoxel">A voxel of type T</param>
            <returns>The distance between this voxel and the given voxel.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Voxel1">A Voxel&lt;T&gt;.</param>
            <param name="Voxel2">Another Voxel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Voxel1">A Voxel&lt;T&gt;.</param>
            <param name="Voxel2">Another Voxel&lt;T&gt;.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IVoxelT">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Compares two voxels for equality.
            </summary>
            <param name="IVoxel">A voxel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector`1">
            <summary>
            A delegate selecting which voxels to return.
            </summary>
            <typeparam name="T">The internal datatype of the voxel.</typeparam>
            <param name="Voxel">A voxel of type T.</param>
            <returns>True if the voxel is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2">
            <summary>
            A voxel of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.#ctor(`0,`0,`0,`1)">
            <summary>
            Create a voxel of type T together with a value of type TValue.
            </summary>
            <param name="X">The X-coordinate.</param>
            <param name="Y">The Y-coordinate.</param>
            <param name="Z">The Z-coordinate.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.op_Equality(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="VoxelValuePair1">A VoxelValuePair.</param>
            <param name="VoxelValuePair2">Another VoxelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="VoxelValuePair1">A VoxelValuePair.</param>
            <param name="VoxelValuePair2">Another VoxelValuePair.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.CompareTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair{`0,`1})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="IVoxelValuePair">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.Equals(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair{`0,`1})">
            <summary>
            Compares two voxels for equality.
            </summary>
            <param name="IVoxelValuePair">A voxel to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelValuePair`2.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Delaunay_Triangulation">
            <summary>
            A class for calculating a delaunay triangulation.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Delaunay_Triangulation.DelaunayTriangulation``1(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{``0,org.GraphDefined.Vanaheimr.Illias.Geometry.SensorInfo{``0}}})">
            <summary>
            Calculate a delaunay triangulation for the given enumeration of pixels.
            </summary>
            <typeparam name="T">The type of the pixels.</typeparam>
            <param name="Pixels">An enumeration of pixels of type T.</param>
            <returns>An enumeration of triangles of type T.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1">
            <summary>
            The base class for all bintree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.Bintree">
            <summary>
            The bintree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.Element">
            <summary>
            An optional element causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},`0,System.String,System.Exception)">
            <summary>
            A general bintree exception occurred!
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Element">An optional element causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the bintree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the bintree is zero.
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given element is
            located outside of the bintree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.BT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree{`0},`0,System.String,System.Exception)">
            <summary>
            An exception thrown when the given element is
            located outside of the bintree bounds!
            </summary>
            <param name="Bintree">The bintree causing this exception.</param>
            <param name="Element">The element causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1">
            <summary>
            The base class for all octree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.Octree">
            <summary>
            The octree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.Voxel">
            <summary>
            An optional voxel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0},System.String,System.Exception)">
            <summary>
            A general octree exception occurred!
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Voxel">An optional voxel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the octree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the octree is zero.
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given voxel is
            located outside of the octree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.OT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Octree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given voxel is
            located outside of the octree bounds!
            </summary>
            <param name="Octree">The octree causing this exception.</param>
            <param name="Voxel">The voxel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1">
            <summary>
            The base class for all quadtree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.Quadtree">
            <summary>
            The quadtree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.Pixel">
            <summary>
            An optional pixel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            A general quadtree exception occurred!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">An optional pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2">
            <summary>
            The base class for all quadtree exceptions.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.Quadtree">
            <summary>
            The quadtree causing this exception.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.Pixel">
            <summary>
            An optional pixel causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            A general quadtree exception occurred!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">An optional pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`1">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`2">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_ZeroDimensionException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},System.String,System.Exception)">
            <summary>
            An exception thrown when at least one dimension
            of the quadtree is zero.
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`1">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">The pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`2">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.QT_OutOfBoundsException`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree{`0,`1},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},System.String,System.Exception)">
            <summary>
            An exception thrown when the given pixel is
            located outside of the quadtree bounds!
            </summary>
            <param name="Quadtree">The quadtree causing this exception.</param>
            <param name="Pixel">The pixel causing this exception.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICubeExtensions">
            <summary>
            Extensions to the ICube interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICubeExtensions.Contains``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{``0})">
            <summary>
            Checks if the given voxel is located
            within the given cube.
            </summary>
            <param name="ICube">A cube of type T.</param>
            <param name="IVoxel">A voxel of type T.</param>
            <returns>True if the voxel is located within the given cube; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions">
            <summary>
            Extensions to the ILine2D interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.IntersectsWith``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},System.Boolean)">
            <summary>
            Checks if the given lines intersect.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.Intersection``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0},System.Boolean)">
            <summary>
            Returns the intersection of both lines.
            </summary>
            <param name="Line1">A line.</param>
            <param name="Line2">A line.</param>
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2DExtensions.IsJustAPixel``1(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{``0})">
            <summary>
            Checks if the given line is "just a pixel".
            </summary>
            <param name="Line">A line.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions">
            <summary>
            Extensions to the IPixel interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},``0,``0,``0,``0)">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="X1"></param>
            <param name="Y1"></param>
            <param name="X2"></param>
            <param name="Y2"></param>        
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Pixel1">The left/top pixel of the rectangle.</param>
            <param name="Pixel2">The right/bottom pixel of the rectangle.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInRectangle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelExtensions.IsInCircle``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the pixel is located within the given circle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangleExtensions">
            <summary>
            Extensions to the IRectangle interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangleExtensions.Contains``1(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{``0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{``0})">
            <summary>
            Checks if the given pixel is located
            within the given rectangle.
            </summary>
            <param name="Rectangle">A rectanlge of type T.</param>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located within the given rectangle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector`1">
            <summary>
            A delegate selecting which element to return.
            </summary>
            <typeparam name="T">The internal type of the element.</typeparam>
            <param name="Element">An element of type T.</param>
            <returns>True if the element is selected; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.BintreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            bintree splits an internal line.
            </summary>
            <typeparam name="T">The type of the Bintree.</typeparam>
            <param name="Bintree">The sending bintree.</param>
            <param name="Element">The element causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1">
            <summary>
            A bintree is an indexing structure for 1-dimensional spartial data.
            It stores the given maximum number of elements and forkes itself
            into two subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the Bintree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.OnTreeSplit">
            <summary>
            An event to notify about a bintree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.MaxNumberOfEmbeddedElements">
            <summary>
            The maximum number of embedded elements before
            two subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.EmbeddedCount">
            <summary>
            Return the number of embedded elements
            stored within this bintree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Count">
            <summary>
            Return the number of elements stored
            within the entire bintree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.#ctor(`0,`0,System.UInt32)">
            <summary>
            Create a bintree of type T.
            </summary>
            <param name="Left">The left-coordinate of the line.</param>
            <param name="Right">The right-coordinate of the line.</param>
            <param name="MaxNumberOfEmbeddedElements">The maximum number of embedded elements before four child node will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Add(`0)">
            <summary>
            Add an element to the bintree.
            </summary>
            <param name="Element">A element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector{`0})">
            <summary>
            Return all elements matching the given elementselector delegate.
            </summary>
            <param name="ElementSelector">A delegate selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Return all elements within the given line.
            </summary>
            <param name="Line">A line selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Remove(`0)">
            <summary>
            Remove an element from the bintree.
            </summary>
            <param name="Element">A element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Remove all elements located within the given line.
            </summary>
            <param name="Line">A line selecting which elements to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored data.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Bintree`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.OctreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            octree splits an internal cube.
            </summary>
            <typeparam name="T">The type of the Octree.</typeparam>
            <param name="Octree">The sending octree.</param>
            <param name="Voxel">The voxel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1">
            <summary>
            A Octree is an indexing structure for two-dimensional spartial data.
            It stores the given maximum number of voxels and forkes itself
            into eight subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.OnTreeSplit">
            <summary>
            An event to notify about an octree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.MaxNumberOfEmbeddedVoxels">
            <summary>
            The maximum number of embedded voxels before
            eight subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.EmbeddedCount">
            <summary>
            Return the number of embedded voxels
            stored within this octree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Count">
            <summary>
            Return the number of voxels stored
            within the entire octree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(`0,`0,`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Front">The front-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="Behind">The behind-coordinate.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Voxel1">A voxel of type T.</param>
            <param name="Voxel2">A voxel of type T.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Voxel{`0},`0,`0,`0,System.UInt32)">
            <summary>
            Create a octree of type T.
            </summary>
            <param name="Voxel">A voxel of type T in the upper left corner of the octree.</param>
            <param name="Width">The width of the octree.</param>
            <param name="Height">The height of the octree.</param>
            <param name="Depth">The depth of the octree.</param>
            <param name="MaxNumberOfEmbeddedVoxels">The maximum number of embedded voxels before eight subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Add a voxel to the octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector{`0})">
            <summary>
            Return all voxels matching the given voxelselector delegate.
            </summary>
            <param name="VoxelSelector">A delegate selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Return all voxels within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Remove a voxel from the octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Remove all voxels located within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored voxels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored voxels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Octree`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeSplitEventHandler`1">
            <summary>
            An event handler delegate definition whenever an
            quadtree splits an internal rectangle.
            </summary>
            <typeparam name="T">The type of the Quadtree.</typeparam>
            <param name="Quadtree">The sending quadtree.</param>
            <param name="Pixel">The pixel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.QuadtreeSplitEventHandler`2">
            <summary>
            An event handler delegate definition whenever an
            quadtree splits an internal rectangle.
            </summary>
            <typeparam name="T">The type of the Quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
            <param name="Quadtree">The sending quadtree.</param>
            <param name="Pixel">The pixel causing the split.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.OnTreeSplit">
            <summary>
            An event to notify about a quadtree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded pixels before
            four subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this quadtree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the quadtree.</param>
            <param name="Width">The width of the quadtree.</param>
            <param name="Height">The height of the quadtree.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Add(`0,`0)">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.OnTreeSplit">
            <summary>
            An event to notify about a quadtree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded pixels before
            four subtrees will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this quadtree(-node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(`0,`0,`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Left">The left-coordinate.</param>
            <param name="Top">The top-coordinate.</param>
            <param name="Right">The right-coordinate.</param>
            <param name="Bottom">The bottom-coordinate.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel1">A pixel of type T.</param>
            <param name="Pixel2">A pixel of type T.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.#ctor(org.GraphDefined.Vanaheimr.Illias.Geometry.Pixel{`0},`0,`0,System.UInt32)">
            <summary>
            Create a quadtree of type T.
            </summary>
            <param name="Pixel">A pixel of type T in the upper left corner of the quadtree.</param>
            <param name="Width">The width of the quadtree.</param>
            <param name="Height">The height of the quadtree.</param>
            <param name="MaxNumberOfEmbeddedPixels">The maximum number of embedded pixels before four subtrees will be created.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(`0,`0,`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Add a PixelValuePair to the quadtree.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumeration of all stored pixels.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Quadtree`2.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1">
            <summary>
            The interface of a 1-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Left">
            <summary>
            The left-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Right">
            <summary>
            The right-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Contains(`0)">
            <summary>
            Checks if the given element is located on this line.
            </summary>
            <param name="Element">An element.</param>
            <returns>True if the element is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line is located on this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Checks if the given line shares some
            area with this line.
            </summary>
            <param name="Line">A line of type T.</param>
            <returns>True if the line shares some area with this line; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1">
            <summary>
            The interface of a circle of type T.
            </summary>
            <typeparam name="T">The internal type of the circle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.X">
            <summary>
            The x-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Y">
            <summary>
            The y-coordinate of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this circle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this circle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle is located
            within this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle is located within this circle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICircle{`0})">
            <summary>
            Checks if the given circle shares some
            area with this circle.
            </summary>
            <param name="Circle">A circle of type T.</param>
            <returns>True if the circle shares some area with this circle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1">
            <summary>
            The interface of a 2-dimensional line of type T.
            </summary>
            <typeparam name="T">The internal type of the line.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.X1">
            <summary>
            The first x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Y1">
            <summary>
            The first y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.X2">
            <summary>
            The second x-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Y2">
            <summary>
            The second y-coordinate of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Pixel1">
            <summary>
            The left/top pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Pixel2">
            <summary>
            The right/bottom pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Gradient">
            <summary>
            The gradient/inclination of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.YIntercept">
            <summary>
            The interception of the line with the y-axis.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Center">
            <summary>
            The center pixel of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Vector">
            <summary>
            The vector of the line.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Normale">
            <summary>
            The normale vector of the line.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located on this line.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
            <returns>True if the pixel is located on this line; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D`1.IntersectsWith(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine2D{`0},org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0}@,System.Boolean)">
            <summary>
            Checks if and where the given lines intersect.
            </summary>
            <param name="Line">A line.</param>
            <param name="Pixel">The intersection of both lines.</param>        
            <param name="InfiniteLines">Whether the lines should be treated as infinite or not.</param>
            <returns>True if the lines intersect; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1">
            <summary>
            The interface of a pixel of type T.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            pixel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this pixel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            A method to calculate the distance between
            this and another pixel of type T.
            </summary>
            <param name="Pixel">A pixel of type T</param>
            <returns>The distance between this pixel and the given pixel.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair`2">
            <summary>
            The interface of a PixelValuePair.
            </summary>
            <typeparam name="T">The internal type of the pixel.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair`2.Value">
            <summary>
            The value stored together with a pixel.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1">
            <summary>
            The interface of a polygon of type T.
            </summary>
            <typeparam name="T">The internal type of the polygon.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1.Pixels">
            <summary>
            The pixels of the polygon.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IPolygon`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the polygon.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1">
            <summary>
            The interface of a rectangle of type T.
            </summary>
            <typeparam name="T">The internal type of the rectangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Left">
            <summary>
            The left-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Top">
            <summary>
            The top-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Right">
            <summary>
            The right-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Bottom">
            <summary>
            The bottom-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Diameter">
            <summary>
            The length of the diagonale (diameter) of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Center">
            <summary>
            The center pixel of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the rectangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Diagonales">
            <summary>
            Return an enumeration of lines representing the diagonales of the rectangle.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(`0,`0)">
            <summary>
            Checks if the given x- and y-coordinates are
            located within this rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the coordinates are located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Checks if the given pixel is located
            within this rectangle.
            </summary>
            <param name="Pixel">A pixel.</param>
            <returns>True if the pixel is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle is located
            within this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle is located within this rectangle; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Checks if the given rectangle shares some
            area with this rectangle.
            </summary>
            <param name="Rectangle">A rectangle of type T.</param>
            <returns>True if the rectangle shares some area with this rectangle; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1">
            <summary>
            The interface of a triangle of type T.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P1">
            <summary>
            The first pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P2">
            <summary>
            The second pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.P3">
            <summary>
            The third pixel of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.CircumCenter">
            <summary>
            Return the cirumcenter of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.CircumCircle">
            <summary>
            Return the circumcircle of the triangle.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangle`1.Borders">
            <summary>
            Return an enumeration of lines representing the
            surrounding borders of the triangle.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair`2">
            <summary>
            A triangle of type T together with a value of type TValue.
            </summary>
            <typeparam name="T">The internal type of the triangle.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ITriangleValuePair`2.Value">
            <summary>
            The value stored together with a triangle.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1">
            <summary>
            The interface of a 2-dimensional vector of type T.
            </summary>
            <typeparam name="T">The internal type of the vector.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.X">
            <summary>
            The ToLeft-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.Y">
            <summary>
            The ToBottom-component of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.NormVector">
            <summary>
            Return a normalized vector.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.IsParallelTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            Determines if the given vector is parallel or
            antiparallel to this vector.
            </summary>
            <param name="Vector">A vector.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.DistanceTo(`0,`0)">
            <summary>
            A method to calculate the distance between this
            vector and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <returns>The distance between this vector and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVector2D{`0})">
            <summary>
            A method to calculate the distance between
            this and another vector of type T.
            </summary>
            <param name="Vector">A vector of type T</param>
            <returns>The distance between this vector and the given vector.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1">
            <summary>
            The interface of a cube of type T.
            </summary>
            <typeparam name="T">The internal type of the cube.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Front">
            <summary>
            Front
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Behind">
            <summary>
            Behind
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Width">
            <summary>
            The width of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Height">
            <summary>
            The height of the cube.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Depth">
            <summary>
            The depth of the cube.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this cube.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this cube.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
            <returns>True if the voxel is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube is located
            within this cube.
            </summary>
            <param name="Cube">A cube of type T.</param>
            <returns>True if the cube is located within this cube; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ICube`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Checks if the given cube shares some
            area with this cube.
            </summary>
            <param name="Cube">A cube of type T.</param>
            <returns>True if the cube shares some area with this cube; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1">
            <summary>
            The interface of a sphere of type T.
            </summary>
            <typeparam name="T">The internal type of the sphere.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Left">
            <summary>
            The left-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Top">
            <summary>
            The top-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Front">
            <summary>
            The front-coordinate of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Center">
            <summary>
            The center of the sphere.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Diameter">
            <summary>
            The diameter of the sphere.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(`0,`0,`0)">
            <summary>
            Checks if the given x-, y- and z-coordinates
            are located within this sphere.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>True if the coordinates are located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Checks if the given voxel is located
            within this sphere.
            </summary>
            <param name="Voxel">A voxel.</param>
            <returns>True if the voxel is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Contains(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere is located
            within this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere is located within this sphere; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere`1.Overlaps(org.GraphDefined.Vanaheimr.Illias.Geometry.ISphere{`0})">
            <summary>
            Checks if the given sphere shares some
            area with this sphere.
            </summary>
            <param name="Sphere">A sphere of type T.</param>
            <returns>True if the sphere shares some area with this sphere; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1">
            <summary>
            The interface of a voxel of type T.
            </summary>
            <typeparam name="T">The internal type of the voxel.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.Z">
            <summary>
            The Z-coordinate.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.DistanceTo(`0,`0,`0)">
            <summary>
            A method to calculate the distance between this
            voxel and the given coordinates of type T.
            </summary>
            <param name="x">A x-coordinate of type T</param>
            <param name="y">A y-coordinate of type T</param>
            <param name="z">A z-coordinate of type T</param>
            <returns>The distance between this voxel and the given coordinates.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel`1.DistanceTo(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            A method to calculate the distance between
            this and another voxel of type T.
            </summary>
            <param name="Voxel">A voxel of type T</param>
            <returns>The distance between this voxel and the given voxel.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair`2">
            <summary>
            The interface of a VoxelValuePair.
            </summary>
            <typeparam name="TKey">The internal type of the voxel.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxelValuePair`2.Value">
            <summary>
            The value stored together with a voxel.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1">
            <summary>
            A bintree is an indexing structure for 1-dimensional spartial data.
            It stores the given maximum number of elements and forkes itself
            into two subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the bintree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.OnTreeSplit">
            <summary>
            An event to notify about an bintree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.MaxNumberOfEmbeddedElements">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this Bintree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Count">
            <summary>
            Return the number of pixels stored
            within the entire bintree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Add(`0)">
            <summary>
            Add an element to the bintree.
            </summary>
            <param name="Element">An element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ElementSelector{`0})">
            <summary>
            Return all elements matching the given elementselector delegate.
            </summary>
            <param name="ElementSelector">A delegate selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Return all elements within the given line.
            </summary>
            <param name="Line">A line selecting which elements to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Remove(`0)">
            <summary>
            Remove a element from the bintree.
            </summary>
            <param name="Element">An element of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IBintree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ILine1D{`0})">
            <summary>
            Remove all elements located within the given line.
            </summary>
            <param name="Line">A line selecting which elements to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1">
            <summary>
            A octree is an indexing structure for 3-dimensional spartial data.
            It stores the given maximum number of voxels and forkes itself
            into eight subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the octree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.OnTreeSplit">
            <summary>
            An event to notify about an octree split happening.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.MaxNumberOfEmbeddedVoxels">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.EmbeddedCount">
            <summary>
            Return the number of embedded voxels
            stored within this Octree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Count">
            <summary>
            Return the number of voxels stored
            within the entire octree.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Add a voxel to the Octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.VoxelSelector{`0})">
            <summary>
            Return all voxels matching the given voxelselector delegate.
            </summary>
            <param name="VoxelSelector">A delegate selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Return all voxels within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IVoxel{`0})">
            <summary>
            Remove a voxel from the Octree.
            </summary>
            <param name="Voxel">A voxel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IOctree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.ICube{`0})">
            <summary>
            Remove all voxels located within the given cube.
            </summary>
            <param name="Cube">A cube selecting which voxels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.MaxNumberOfEmbeddedPixels">
            <summary>
            The maximum number of embedded elements before
            four child node will be created.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.EmbeddedCount">
            <summary>
            Return the number of embedded pixels
            stored within this Quadtree(Node).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree.Count">
            <summary>
            Return the number of pixels stored
            within the entire quadtree.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.OnTreeSplit">
            <summary>
            An event to notify about an quadtree split happening.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Add(`0,`0)">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Add a pixel to the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`1.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2">
            <summary>
            A quadtree is an indexing structure for 2-dimensional spartial data.
            It stores the given maximum number of pixels and forkes itself
            into four subtrees if this number becomes larger.
            Note: This datastructure is not self-balancing!
            </summary>
            <typeparam name="T">The internal datatype of the quadtree.</typeparam>
            <typeparam name="TValue">The type of the stored values.</typeparam>
        </member>
        <member name="E:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.OnTreeSplit">
            <summary>
            An event to notify about an quadtree split happening.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(`0,`0,`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="X">The x-coordinate of a pixel of type T.</param>
            <param name="Y">The y-coordinate of a pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixel{`0},`1)">
            <summary>
            Add a pixel together with a value to the quadtree.
            </summary>
            <param name="IPixel">A pixel of type T.</param>
            <param name="Value">A value of type TValue.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Add(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Add a PixelValuePair to the quadtree.
            </summary>
            <param name="IPixelValuePair">A PixelValuePair.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.PixelSelector{`0})">
            <summary>
            Return all pixels matching the given pixelselector delegate.
            </summary>
            <param name="PixelSelector">A delegate selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Get(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Return all pixels within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to return.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IPixelValuePair{`0,`1})">
            <summary>
            Remove a pixel from the quadtree.
            </summary>
            <param name="Pixel">A pixel of type T.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.IQuadtree`2.Remove(org.GraphDefined.Vanaheimr.Illias.Geometry.IRectangle{`0})">
            <summary>
            Remove all pixels located within the given rectangle.
            </summary>
            <param name="Rectangle">A rectangle selecting which pixels to remove.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1">
            <summary>
            An interface defining maths operations on the given datatype.
            </summary>
            <typeparam name="T">The internal dataype.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Min(`0[])">
            <summary>
            A method to get the minimum of an array of internal datatypes.
            </summary>
            <param name="Values">An array of type T</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Max(`0[])">
            <summary>
            A method to get the maximum of an array of internal datatypes.
            </summary>
            <param name="Values">An array of type T</param>
            <returns>The maximum of all values: Max(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Add(`0[])">
            <summary>
            A method to add internal datatypes.
            </summary>
            <param name="Summands">An array of Doubles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Sub(`0,`0)">
            <summary>
            A method to sub two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Mul(`0[])">
            <summary>
            A method to multiply internal datatypes.
            </summary>
            <param name="Multiplicators">An array of type T.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Mul2(`0)">
            <summary>
            A method to multiply the internal datatype by 2.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Div(`0,`0)">
            <summary>
            A method to divide two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Div2(`0)">
            <summary>
            A method to divide the internal datatype by 2.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Pow(`0,`0)">
            <summary>
            A method to calculate an internal datatype raised to the specified power.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Inv(`0)">
            <summary>
            A method to calculate the inverse value of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Abs(`0)">
            <summary>
            A method to calculate the absolute value of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Sqrt(`0)">
            <summary>
            A method to calculate the square root of the internal datatype.
            </summary>
            <param name="a">An object of type T</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.IMaths`1.Distance(`0,`0)">
            <summary>
            A method to calculate the distance between two internal datatypes.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble">
            <summary>
            Defining math operations on Double.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Min(System.Double[])">
            <summary>
            A method to get the minimum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Max(System.Double[])">
            <summary>
            A method to get the maximum of an array of Doubles.
            </summary>
            <param name="Values">An array of Doubles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Add(System.Double[])">
            <summary>
            A method to add Doubles.
            </summary>
            <param name="Summands">An array of Doubles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Sub(System.Double,System.Double)">
            <summary>
            A method to sub two Doubles.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Mul(System.Double[])">
            <summary>
            A method to multiply Doubles.
            </summary>
            <param name="Multiplicators">An array of Doubles.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Mul2(System.Double)">
            <summary>
            A method to multiply a Double by 2.
            </summary>
            <param name="a">A Double.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Div(System.Double,System.Double)">
            <summary>
            A method to divide two Doubles.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Div2(System.Double)">
            <summary>
            A method to divide a Double by 2.
            </summary>
            <param name="a">A Double.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Pow(System.Double,System.Double)">
            <summary>
            A method to calculate a Double raised to the specified power.
            </summary>
            <param name="a">A Double.</param>
            <param name="b">A Double.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Inv(System.Double)">
            <summary>
            A method to calculate the inverse value of the given Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Abs(System.Double)">
            <summary>
            A method to calculate the absolute value of the given Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Sqrt(System.Double)">
            <summary>
            A method to calculate the square root of the Double.
            </summary>
            <param name="a">A Double.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsDouble.Distance(System.Double,System.Double)">
            <summary>
            A method to calculate the distance between two Doubles.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsFactory`1">
            <summary>
            Build and return an appropriate math object for datatype T.
            </summary>
            <typeparam name="T">The internal type of the maths object.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsFactory`1.Instance">
            <summary>
            Return an appropriate maths object for datatype T.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32">
            <summary>
            Defining math operations on Int32.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Min(System.Int32[])">
            <summary>
            A method to get the minimum of an array of Int32s.
            </summary>
            <param name="Values">An array of Int32s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Max(System.Int32[])">
            <summary>
            A method to get the maximum of an array of Int32s.
            </summary>
            <param name="Values">An array of Int32s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Add(System.Int32[])">
            <summary>
            A method to add Int32s.
            </summary>
            <param name="Summands">An array of Int32s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Sub(System.Int32,System.Int32)">
            <summary>
            A method to sub two Int32s.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Mul(System.Int32[])">
            <summary>
            A method to multiply Int32s.
            </summary>
            <param name="Multiplicators">An array of Int32s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Mul2(System.Int32)">
            <summary>
            A method to multiply an Int32 by 2.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Div(System.Int32,System.Int32)">
            <summary>
            A method to divide two Int32s.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Div2(System.Int32)">
            <summary>
            A method to divide an Int32 by 2.
            </summary>
            <param name="a">A Int32.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Pow(System.Int32,System.Int32)">
            <summary>
            A method to calculate a Int32 raised to the specified power.
            </summary>
            <param name="a">A Int32.</param>
            <param name="b">A Int32.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Inv(System.Int32)">
            <summary>
            A method to calculate the inverse value of the given Int32.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Abs(System.Int32)">
            <summary>
            A method to calculate the absolute value of the given Int32.
            </summary>
            <param name="a">An Int32.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Sqrt(System.Int32)">
            <summary>
            A method to calculate the square root of the Int32.
            </summary>
            <param name="a">A Int32.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt32.Distance(System.Int32,System.Int32)">
            <summary>
            A method to calculate the distance between two Int32s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64">
            <summary>
            Defining math operations on Int64.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Min(System.Int64[])">
            <summary>
            A method to get the minimum of an array of Int64s.
            </summary>
            <param name="Values">An array of Int64s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Max(System.Int64[])">
            <summary>
            A method to get the maximum of an array of Int64s.
            </summary>
            <param name="Values">An array of Int64s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Add(System.Int64[])">
            <summary>
            A method to add Int64s.
            </summary>
            <param name="Summands">An array of Int64s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Sub(System.Int64,System.Int64)">
            <summary>
            A method to sub two Int64s.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Mul(System.Int64[])">
            <summary>
            A method to multiply Int64s.
            </summary>
            <param name="Multiplicators">An array of Int64s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Mul2(System.Int64)">
            <summary>
            A method to multiply an Int64 by 2.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Div(System.Int64,System.Int64)">
            <summary>
            A method to divide two Int64s.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Div2(System.Int64)">
            <summary>
            A method to divide an Int64 by 2.
            </summary>
            <param name="a">A Int64.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Pow(System.Int64,System.Int64)">
            <summary>
            A method to calculate a Int64 raised to the specified power.
            </summary>
            <param name="a">A Int64.</param>
            <param name="b">A Int64.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Inv(System.Int64)">
            <summary>
            A method to calculate the inverse value of the given Int64.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Abs(System.Int64)">
            <summary>
            A method to calculate the absolute value of the given Int64.
            </summary>
            <param name="a">An Int64.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Sqrt(System.Int64)">
            <summary>
            A method to calculate the square root of the Int64.
            </summary>
            <param name="a">A Int64.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsInt64.Distance(System.Int64,System.Int64)">
            <summary>
            A method to calculate the distance between two Int64s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle">
            <summary>
            Defining math operations on Single.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Min(System.Single[])">
            <summary>
            A method to get the minimum of an array of Singles.
            </summary>
            <param name="Values">An array of Singles.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Max(System.Single[])">
            <summary>
            A method to get the maximum of an array of Singles.
            </summary>
            <param name="Values">An array of Singles.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Add(System.Single[])">
            <summary>
            A method to add Singles.
            </summary>
            <param name="Summands">An array of Singles.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Sub(System.Single,System.Single)">
            <summary>
            A method to sub two Singles.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Mul(System.Single[])">
            <summary>
            A method to multiply Singles.
            </summary>
            <param name="Multiplicators">An array of Singles.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Mul2(System.Single)">
            <summary>
            A method to multiply a Single by 2.
            </summary>
            <param name="a">A Single.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Div(System.Single,System.Single)">
            <summary>
            A method to divide two Singles.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Div2(System.Single)">
            <summary>
            A method to divide a Single by 2.
            </summary>
            <param name="a">A Single.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Pow(System.Single,System.Single)">
            <summary>
            A method to calculate a Single raised to the specified power.
            </summary>
            <param name="a">A Single.</param>
            <param name="b">A Single.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Inv(System.Single)">
            <summary>
            A method to calculate the inverse value of the given Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The inverse value of a: -a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Abs(System.Single)">
            <summary>
            A method to calculate the absolute value of the given Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Sqrt(System.Single)">
            <summary>
            A method to calculate the square root of the Single.
            </summary>
            <param name="a">A Single.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsSingle.Distance(System.Single,System.Single)">
            <summary>
            A method to calculate the distance between two Singles.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32">
            <summary>
            Defining math operations on UInt32.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Instance">
            <summary>
            Return a singelton instance of this maths class.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Zero">
            <summary>
            Return the zero value of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.NegativeInfinity">
            <summary>
            Return the negative infinity of this datatype.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.PositiveInfinity">
            <summary>
            Return the positive infinity of this datatype.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Min(System.UInt32[])">
            <summary>
            A method to get the minimum of an array of UInt32s.
            </summary>
            <param name="Values">An array of UInt32s.</param>
            <returns>The minimum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Max(System.UInt32[])">
            <summary>
            A method to get the maximum of an array of UInt32s.
            </summary>
            <param name="Values">An array of UInt32s.</param>
            <returns>The maximum of all values: Min(a, b, ...)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Add(System.UInt32[])">
            <summary>
            A method to add UInt32s.
            </summary>
            <param name="Summands">An array of UInt32s.</param>
            <returns>The addition of all summands: a + b + ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Sub(System.UInt32,System.UInt32)">
            <summary>
            A method to sub two UInt32s.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The subtraction of b from a: a - b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Mul(System.UInt32[])">
            <summary>
            A method to multiply UInt32s.
            </summary>
            <param name="Multiplicators">An array of UInt32s.</param>
            <returns>The multiplication of all multiplicators: a * b * ...</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Mul2(System.UInt32)">
            <summary>
            A method to multiply an UInt32 by 2.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The multiplication of a by 2: 2*a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Div(System.UInt32,System.UInt32)">
            <summary>
            A method to divide two UInt32s.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The division of a by b: a / b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Div2(System.UInt32)">
            <summary>
            A method to divide an UInt32 by 2.
            </summary>
            <param name="a">A UInt32.</param>
            <returns>The division of a by 2: a / 2</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Pow(System.UInt32,System.UInt32)">
            <summary>
            A method to calculate a UInt32 raised to the specified power.
            </summary>
            <param name="a">A UInt32.</param>
            <param name="b">A UInt32.</param>
            <returns>The value a raised to the specified power of b: a^b</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Inv(System.UInt32)">
            <summary>
            A method to calculate the inverse value of the given UInt32,
            but actually returns a for unsigned datatypes.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The inverse value of a: a</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Abs(System.UInt32)">
            <summary>
            A method to calculate the absolute value of the given UInt32.
            </summary>
            <param name="a">An UInt32.</param>
            <returns>The absolute value of a: |a|</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Sqrt(System.UInt32)">
            <summary>
            A method to calculate the square root of the UInt32.
            </summary>
            <param name="a">A UInt32.</param>
            <returns>The square root of a: Sqrt(a)</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Maths.MathsUInt32.Distance(System.UInt32,System.UInt32)">
            <summary>
            A method to calculate the distance between two UInt32s.
            </summary>
            <param name="a">An object of type T</param>
            <param name="b">An object of type T</param>
            <returns>The distance between a and b.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions">
            <summary>
            Some type extensions to check for numeric types.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsArithmetic(System.Type)">
            <summary>
            Checks whether the given type is arithmetic or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is arithmetic; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsInteger(System.Type)">
            <summary>
            Checks whether the given type is any kind of an integer or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of an integer; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsFloatingPoint(System.Type)">
            <summary>
            Checks whether the given type is any kind of a floating point or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of a floating point; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Geometry.Tools.NumericTypeExtensions.IsNumeric(System.Type)">
            <summary>
            Checks whether the given type is any kind of a numeric or not.
            </summary>
            <param name="Type">A type.</param>
            <returns>True if the type is any kind of a numeric; False otherwise.</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Geometry.Voronoi">
            <summary>
            A class for calculating a voronoi diagram.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Int64MinMax">
            <summary>
            Min/Max values for Int64s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates a new range of Int64 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int64MinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Int32MinMax">
            <summary>
            Min/Max values for Int32s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new range of Int32 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Int32MinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax">
            <summary>
            Min/Max values for UInt32s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.#ctor(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Creates a new range of UInt32 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt32MinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax">
            <summary>
            Min/Max values for UInt64s.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.#ctor(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Creates a new range of UInt64 values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.UInt64MinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax">
            <summary>
            Min/Max values for doubles.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new range of double values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DoubleMinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax">
            <summary>
            Min/Max values for decimals.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Creates a new range of decimal values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.FromMin(System.Decimal)">
            <summary>
            Create a new half-open definition having just a minimum value.
            </summary>
            <param name="MinValue">The minimum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.FromMax(System.Decimal)">
            <summary>
            Create a new half-open definition having just a maximum value.
            </summary>
            <param name="MaxValue">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.DecimalMinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Country">
            <summary>
            A country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.CountryName">
            <summary>
            The name of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.Alpha2Code">
            <summary>
            The ISO Alpha-2 Code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.Alpha3Code">
            <summary>
            The ISO Alpha-3 Code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.NumericCode">
            <summary>
            The ISO numeric code UN M49 Numerical Code of the country.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Country.TelefonCode">
            <summary>
            Country calling code or dial in code defined by ITU-T recommendations
            E.123 and E.164, also called IDD (International Direct Dialling) or
            ISD (International Subscriber Dialling) code.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.#ctor(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String,System.String,System.UInt16,System.UInt16)">
            <summary>
            Creates a new country based on a country name and its codings.
            </summary>
            <param name="CountryName">The name of the country.</param>
            <param name="Alpha2Code">The ISO Alpha-2 Code of the country.</param>
            <param name="Alpha3Code">The ISO Alpha-3 Code of the country.</param>
            <param name="NumericCode">The ISO numeric code UN M49 Numerical Code of the country.</param>
            <param name="TelefonCode">Country calling code or dial in code defined by ITU-T recommendations E.123 and E.164, also called IDD (International Direct Dialling) or ISD (International Subscriber Dialling) code.</param>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Country.unknown">
            <summary>
            An unkown country.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Parse(System.String)">
            <summary>
            Tries to find the appropriate country for the given string.
            </summary>
            <param name="AnyString">Any string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given string.
            </summary>
            <param name="AnyString">Any string.</param>
            <param name="CountryValue">The country.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseCountryName(System.String)">
            <summary>
            Tries to find the appropriate country for the given country name.
            </summary>
            <param name="CountryName">A country name.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseCountryName(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given country name.
            </summary>
            <param name="CountryName">A country name.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseAlpha2Code(System.String)">
            <summary>
            Tries to find the appropriate country for the given alpha2code.
            </summary>
            <param name="Alpha2Code">An alpha2code for a country, e.g. "DE" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseAlpha2Code(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given alpha2code.
            </summary>
            <param name="Alpha2Code">An alpha2code for a country, e.g. "DE" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseAlpha3Code(System.String)">
            <summary>
            Tries to find the appropriate country for the given alpha3code.
            </summary>
            <param name="Alpha3Code">An alpha3code for a country, e.g. "DEU" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseAlpha3Code(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given alpha3code.
            </summary>
            <param name="Alpha3Code">An alpha3code for a country, e.g. "DEU" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseNumericCode(System.UInt16)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseNumericCode(System.String)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseNumericCode(System.UInt16,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseNumericCode(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given numeric code.
            </summary>
            <param name="NumericCode">A numeric code for a country, e.g. "276" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseTelefonCode(System.UInt16)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ParseTelefonCode(System.String)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseTelefonCode(System.UInt16,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.TryParseTelefonCode(System.String,org.GraphDefined.Vanaheimr.Illias.Country@)">
            <summary>
            Tries to find the appropriate country for the given telefon code.
            </summary>
            <param name="TelefonCode">A telefon code for a country, e.g. "49" for Germany.</param>
            <param name="Country">The corresponding country.</param>
            <returns>true, if successful; false otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_Equality(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Country,org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country1">A country.</param>
            <param name="Country2">Another country.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.CompareTo(org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Country">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.Equals(org.GraphDefined.Vanaheimr.Illias.Country)">
            <summary>
            Compares two Countrys for equality.
            </summary>
            <param name="Country">A Country to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Country.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Currency">
            <summary>
            ISO 4217 currencies.
            </summary>
            <seealso cref="!:https://de.wikipedia.org/wiki/ISO_4217" />
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.ISOCode">
            <summary>
            The ISO code of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Numeric">
            <summary>
            The numeric code of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Name">
            <summary>
            The name of the currency.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Currency.Countries">
            <summary>
            Countries using this currency.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.#ctor(System.String,System.UInt16,System.String,org.GraphDefined.Vanaheimr.Illias.Country[])">
            <summary>
            ISO 4217 currencies.
            </summary>
            <param name="ISOCode">The ISO code of the currency.</param>
            <param name="Numeric">The numeric code of the currency.</param>
            <param name="Name">The name of the currency.</param>
            <param name="Countries">Countries using this currency.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.ParseString(System.String)">
            <summary>
            Return the appropriate currency for the given string.
            </summary>
            <param name="Text">The ISO code or name of a currency.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.TryParseEnum(System.String,org.GraphDefined.Vanaheimr.Illias.Currency@)">
            <summary>
            Return the appropriate currency for the given string.
            </summary>
            <param name="Text">The ISO code or name of a currency.</param>
            <param name="Currency">The parsed Currency</param>
            <returns>true or false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.CompareTo(org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Currency">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.Equals(org.GraphDefined.Vanaheimr.Illias.Currency)">
            <summary>
            Compares two Currency for equality.
            </summary>
            <param name="Currency">An Currency to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Currency.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NPair">
            <summary>
            An internationalized (I18N) language text pair.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NPair.Language">
            <summary>
            The internationalized (I18N) language.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NPair.Text">
            <summary>
            The internationalized (I18N) text.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.#ctor(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) language text pair.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.Equals(org.GraphDefined.Vanaheimr.Illias.I18NPair)">
            <summary>
            Compares two I18NPair for equality.
            </summary>
            <param name="I18NPair">An I18NPair to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NPair.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtentions.IsNullOrEmpty(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            The I18N text is empty.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtentions.IsNotNullOrEmpty(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            The I18N text is not empty.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NStringExtentions.FirstText(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            The first text of an I18N text.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NString">
            <summary>
            An internationalized (I18N) text/string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor">
            <summary>
            Create a new internationalized (I18N) string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) string
            based on the given language and string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(System.Collections.Generic.KeyValuePair{org.GraphDefined.Vanaheimr.Illias.Languages,System.String}[])">
            <summary>
            Create a new internationalized (I18N) string
            based on the given language and string pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(System.Collections.Generic.IEnumerable{org.GraphDefined.Vanaheimr.Illias.I18NPair})">
            <summary>
            Create a new internationalized (I18N) string
            based on the given I18N-pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.#ctor(org.GraphDefined.Vanaheimr.Illias.I18NPair[])">
            <summary>
            Create a new internationalized (I18N) string
            based on the given I18N-pairs.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Create(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Create a new internationalized (I18N) string
            based on the given language and string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Empty">
            <summary>
            Create an empty internationalized (I18N) string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Add(org.GraphDefined.Vanaheimr.Illias.Languages,System.String)">
            <summary>
            Add a new language-text-pair to the given
            internationalized (I18N) string.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <param name="Text">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Add(org.GraphDefined.Vanaheimr.Illias.I18NPair)">
            <summary>
            Add a new language-text-pair to the given
            internationalized (I18N) string.
            </summary>
            <param name="I18NPair">The internationalized (I18N) text.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.has(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Checks if the given language representation exists.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.I18NString.Item(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Get the text specified by the given language.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
            <returns>The internationalized (I18N) text or String.Empty</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Remove(org.GraphDefined.Vanaheimr.Illias.Languages)">
            <summary>
            Remove the given language from the internationalized (I18N) text.
            </summary>
            <param name="Language">The internationalized (I18N) language.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.GetEnumerator">
            <summary>
            Enumerate all internationalized (I18N) texts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all internationalized (I18N) texts.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.op_Equality(org.GraphDefined.Vanaheimr.Illias.I18NString,org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18N-strings for equality.
            </summary>
            <param name="I18NString1">A I18N-string.</param>
            <param name="I18NString2">Another I18N-string.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.op_Inequality(org.GraphDefined.Vanaheimr.Illias.I18NString,org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18N-strings for inequality.
            </summary>
            <param name="I18NString1">A I18N-string.</param>
            <param name="I18NString2">Another I18N-string.</param>
            <returns>False if both match; True otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.Equals(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Compares two I18NString for equality.
            </summary>
            <param name="I18NString">An I18NString to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NString.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.I18NTools">
            <summary>
            Tools for internationalized (I18N) text/string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NTools.SubstringMax(org.GraphDefined.Vanaheimr.Illias.I18NString,System.Int32)">
            <summary>
            Return a substring of the given maximum length.
            </summary>
            <param name="I18NText">A text.</param>
            <param name="Length">The maximum length of the substring.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NTools.ToHTML(org.GraphDefined.Vanaheimr.Illias.I18NString)">
            <summary>
            Convert the given internationalized (I18N) text/string to HTML.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NTools.ToHTML(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String,System.String)">
            <summary>
            Convert the given internationalized (I18N) text/string to HTML.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
            <param name="Prefix">A prefix.</param>
            <param name="Postfix">A postfix.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.I18NTools.ToHTMLLink(org.GraphDefined.Vanaheimr.Illias.I18NString,System.String)">
            <summary>
            Convert the given internationalized (I18N) text/string to a HTML link.
            </summary>
            <param name="I18NString">An internationalized (I18N) text/string.</param>
            <param name="URI">An URI.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.JSONString">
            <summary>
            Return a JSON output representation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.JSONString.ToJSONString">
            <summary>
            Return a JSON output representation.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Languages">
            <summary>
            ISO 639-3 codes for languages.
            http://www-01.sil.org/iso639-3/codes.asp?order=639_3
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Languages1">
            <summary>
            ISO 639-1 codes for languages.
            http://www.loc.gov/standards/iso639-2/php/code_list.php
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id">
            <summary>
            The unique identification for tracking events (EventTrackingId).
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id._Id">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.New">
            <summary>
            Generate a new unique event tracking identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Length">
            <summary>
            Returns the length of the identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.#ctor(System.String)">
            <summary>
            Generate a new unique identification for tracking events (EventTrackingId)
            based on the given string.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Parse(System.String)">
            <summary>
            Parse the given string as an event tracking identification.
            </summary>
            <param name="Text">A text representation of an event tracking identification.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id@)">
            <summary>
            Parse the given string as an event tracking identification.
            </summary>
            <param name="Text">A text representation of an event tracking identification.</param>
            <param name="EventTrackingId">The parsed event tracking identification.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Clone">
            <summary>
            Clone an EventTrackingId.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_Equality(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_Inequality(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_LessThan(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id,org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId1">An event tracking identification.</param>
            <param name="EventTrackingId2">Another event tracking identification.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.CompareTo(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="EventTrackingId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.Equals(org.GraphDefined.Vanaheimr.Illias.EventTracking_Id)">
            <summary>
            Compares two EventTrackingIds for equality.
            </summary>
            <param name="EventTrackingId">A EventTrackingId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.EventTracking_Id.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IdGenerator_UInt64">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IdGenerator_UInt64.NewId(System.Func{System.UInt64,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IdGenerator_String">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IdGenerator_String.NewId(System.Func{System.String,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IIdentifier`1">
            <summary>
            Provides a generic identifier that is unique for its implementing class.
            </summary>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IIdentifier`1.Id">
            <summary>
            A generic identifier that is unique to its implementing class.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IIdGenerator`1">
            <summary>
            An interface for classes generating Ids.
            </summary>
            <typeparam name="TId">The type of the Ids.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.IIdGenerator`1.NewId(System.Func{`0,System.Boolean})">
            <summary>
            Generate a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.IRevisionId`1">
            <summary>
            Provides a generic revision identifier.
            </summary>
            <typeparam name="TRevId">The type of the revision identifier.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.IRevisionId`1.RevId">
            <summary>
            A generic revision identifier.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.RevisionId">
            <summary>
            A RevId is an identificator for a specific IElement revision in
            a distributed system consisting of a timestamp and a SystemId.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RevisionId.Timestamp">
            <summary>
            The timestamp of this revision.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.RevisionId.SystemId">
            <summary>
            A unique identification of the generating system,
            process or thread of this revision.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Generates a RevisionId based on the actual timestamp and the given SystemId.
            </summary>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.UInt64,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Generates a RevisionId based on the given UInt64 timestamp and the given SystemId.
            </summary>
            <param name="Timestamp">A timestamp</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.DateTime,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Generates a RevisionId based on the given DateTime object and the given SystemId.
            </summary>
            <param name="DateTime">A DateTime object</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.String,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff" formated
            string representation of a DateTime object and the given SystemId.
            </summary>
            <param name="DateTimeString">A DateTime object as "yyyyddMM.HHmmss.fffffff"-formated string</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.#ctor(System.String)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff(SystemId)"
            formated string representation of a RevId.
            </summary>
            <param name="RevIdString">A RevId object as "yyyyddMM.HHmmss.fffffff(SystemId)"-formated string</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_Equality(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_Inequality(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_LessThan(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.RevisionId,org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.CompareTo(org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.Equals(org.GraphDefined.Vanaheimr.Illias.RevisionId)">
            <summary>
            Compares two RevIds for equality.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.RevisionId.ToString">
            <summary>
            Returns a formated string representation of this revision
            </summary>
            <returns>A formated string representation of this revision</returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.SystemId">
            <summary>
            A SystemId is unique identificator for a single system within
            a larger distributed system.
            </summary>    
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.SystemId._Id">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.SystemId.Length">
            <summary>
            Returns the length of the identification.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor">
            <summary>
            Generates a new SystemId based on a GUID.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.Int32)">
            <summary>
            Generates a SystemId based on the content of an Int32.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.UInt32)">
            <summary>
            Generates a SystemId based on the content of an UInt32.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.Int64)">
            <summary>
            Generates a SystemId based on the content of an Int64.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.UInt64)">
            <summary>
            Generates a SystemId based on the content of an UInt64.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.String)">
            <summary>
            Generates a SystemId based on the content of String.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(System.Uri)">
            <summary>
            Generates a SystemId based on the content of Uri.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.#ctor(org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Generates a SystemId based on the content of SystemId.
            </summary>
            <param name="SystemId">A SystemId</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.SystemId.NewSystemId">
            <summary>
            Generate a new SystemId.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_Equality(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_Inequality(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_LessThan(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.SystemId,org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.CompareTo(org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.Equals(org.GraphDefined.Vanaheimr.Illias.SystemId)">
            <summary>
            Compares two SystemIds for equality.
            </summary>
            <param name="SystemId">A SystemId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.SystemId.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.ILabel`1">
            <summary>
            Provides a generic label.
            </summary>
            <typeparam name="TLabel">The type of the label.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.ILabel`1.Label">
            <summary>
            A generic label.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Partly">
            <summary>
            Partly
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Range`1">
            <summary>
            A generic range of values.
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Range`1.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Range`1.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new range of values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Range`1.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Loops">
            <summary>
            Loop methods for integers.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Loops.Do(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime">
            <summary>
            A structure to store a start and end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.StartTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.EndTime">
            <summary>
            The end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.Duration">
            <summary>
            The duration.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.#ctor(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Create a new start and end time structure.
            </summary>
            <param name="StartTime">The start time.</param>
            <param name="EndTime">The end time.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.Now">
            <summary>
            Retuen a StartEndDateTime object which start time
            is set to the current date and time.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.StartEndDateTime.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtentions">
            <summary>
            Extention methods for time ranges.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtentions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtentions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,System.Byte)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRangeExtentions.To(org.GraphDefined.Vanaheimr.Illias.TimeRange,System.String)">
            <summary>
            Return a new time range having the end time set to the given value.
            </summary>
            <param name="TimeRange">A time range object.</param>
            <param name="EndTime">The new ending time.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax">
            <summary>
            Min/Max values for TimeSpans.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.Min">
            <summary>
            The minimum value or lower bound.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.Max">
            <summary>
            The maximum value or upper bound.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new range of TimeSpan values.
            </summary>
            <param name="Min">The minimum value or lower bound.</param>
            <param name="Max">The maximum value or upper bound.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.FromMin(System.TimeSpan)">
            <summary>
            Create a new half-open definition having just a minimum value.
            </summary>
            <param name="MinValue">The minimum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.FromMax(System.TimeSpan)">
            <summary>
            Create a new half-open definition having just a maximum value.
            </summary>
            <param name="MaxValue">The maximum value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeSpanMinMax.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Measurement`1">
            <summary>
            This class represents a timestamp value pair of a measurement.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Measurement`1.Timestamp">
            <summary>
            The timestamp of the measurement;
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Measurement`1.Value">
            <summary>
            The value of the measurement;
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Measurement`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new timestamp value pair of a measurement.
            </summary>
            <param name="Timestamp">The timestamp of the measurement.</param>
            <param name="Value">The value of the measurement.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TimeRange">
            <summary>
            A structure to store a start and end time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.StartTime">
            <summary>
            The starting time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.EndTime">
            <summary>
            The ending time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.TimeRange.Duration">
            <summary>
            The duration of the time range.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.#ctor(System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time},System.Nullable{org.GraphDefined.Vanaheimr.Illias.Time})">
            <summary>
            Create a new time range having a start and end time.
            </summary>
            <param name="StartTime">The start time.</param>
            <param name="EndTime">The end time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(System.Byte)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.From(System.String)">
            <summary>
            Create a new time range having the given starting time.
            </summary>
            <param name="StartTime">The starting time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TimeRange.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Time">
            <summary>
            A structure to store a simple time.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Time.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.#ctor(System.Byte,System.Byte,System.Nullable{System.Byte})">
            <summary>
            Create a simple time.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute.</param>
            <param name="Second">The second.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHour(System.Byte)">
            <summary>
            Create a new time based on the given hour.
            </summary>
            <param name="Hour">The hour.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHourMin(System.Byte,System.Byte)">
            <summary>
            Create a new time based on the given hour and minute.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.FromHourMinSec(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new time based on the given hour and minute.
            </summary>
            <param name="Hour">The hour.</param>
            <param name="Minute">The minute</param>
            <param name="Second">The second.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.Parse(System.String)">
            <summary>
            Parse the given text as time.
            </summary>
            <param name="Text">A text representation of the time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.TryParse(System.String,org.GraphDefined.Vanaheimr.Illias.Time@)">
            <summary>
            Try to parse the given text as time.
            </summary>
            <param name="Text">A text representation of the time.</param>
            <param name="Time">The parsed time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Subtraction(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator -
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_Addition(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator +
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator >
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:org.GraphDefined.Vanaheimr.Illias.Time.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)" -->
        <!-- Badly formed XML comment ignored for member "M:org.GraphDefined.Vanaheimr.Illias.Time.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)" -->
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Time,org.GraphDefined.Vanaheimr.Illias.Time)">
            <summary>
            Operator >=
            </summary>
            <param name="Time1">A time.</param>
            <param name="Time2">Another time.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.GetHashCode">
            <summary>
            Get the hashcode of this object.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Time.ToString">
            <summary>
            Get a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Timestamped`1">
            <summary>
            A value with its creation timestamp.
            </summary>
            <typeparam name="T">The type of the timestamped value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Timestamp">
            <summary>
            The timestamp of the value creation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.#ctor(`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Timestamp">The timestamp.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Implicit(`0)~org.GraphDefined.Vanaheimr.Illias.Timestamped{`0}">
            <summary>
            Implicit conversatiuon from an non-timestamped value
            to a timestamped value.
            </summary>
            <param name="Value">The value to be timestamped.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Equality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},`0)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Value">Another value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_Inequality(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},`0)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Value">Another value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_LessThan(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_LessThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_GreaterThan(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.op_GreaterThanOrEqual(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0},org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped1">A timestamped value.</param>
            <param name="Timestamped2">Another timestamped value.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.CompareTo(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Timestamped">An object to compare with.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(`0)">
            <summary>
            Compares two timestamped values for equality.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.Equals(org.GraphDefined.Vanaheimr.Illias.Timestamped{`0})">
            <summary>
            Compares two timestamped values for equality.
            </summary>
            <param name="Timestamped">A timestamped value to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped`1.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1">
            <summary>
            A value with its creation timestamp.
            </summary>
            <typeparam name="T">The type of the timestamped value.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.Timestamp">
            <summary>
            The timestamp of the value creation.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.#ctor(`0)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Timestamped_RW`1.#ctor(`0,System.DateTime)">
            <summary>
            Create a new timestamped value.
            </summary>
            <param name="Value">The value.</param>
            <param name="Timestamp">The timestamp.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp">
            <summary>
            This class will return the current timestamp, but will ensure its
            uniqueness which means it will never return the same value twice.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.Now">
            <summary>
            Returns an unique timestamp as a DateTime object
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.Ticks">
            <summary>
            Returns an unique timestamp as an UInt64
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.UniqueTimestamp.GetUniqueTimestamp">
            <summary>
            Return a unique timestamp
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel">
            <summary>
            Transaction Isolation Levels
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3">
            <summary>
            A (distributed) transaction.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Id">
            <summary>
            The Id of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.SystemId">
            <summary>
            The SystemId of the QuadStore initiating this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Name">
            <summary>
            A user-friendly name or identification for this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.ParentTransaction">
            <summary>
            The parent transaction, if this is a nested transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.CreationTime">
            <summary>
            The creation time of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.IsolationLevel">
            <summary>
            The isolation level of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Distributed">
            <summary>
            Whether this transaction should be synched within an distributed QuadStore.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.LongRunning">
            <summary>
            Whether this transaction is a long-running transaction.
            Long-running transactions may e.g. be swapped on disc.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.InvalidationTime">
            <summary>
            A timestamp after this transaction will no longer be valid.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.TXObject">
            <summary>
            The transaction object.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.FinishingTime">
            <summary>
            The timestamp when this transaction was finished (committed or rolled-back).
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.State">
            <summary>
            The current state of this transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.IsNestedTransaction">
            <summary>
            Returns true if this transaction is a nested transaction.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.HasNestedTransactions">
            <summary>
            Returns true if this transaction contains nested transactions.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.#ctor(`0,`1,System.String,System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Func{`2})">
            <summary>
            Creates a new transaction having the given parameters.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="Name">A name or identification for this transaction.</param>
            <param name="Distributed">Indicates that this transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that this transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of this transaction.</param>
            <param name="CreationTime"></param>
            <param name="InvalidationTime"></param>
            <param name="TransactionObjectCreator"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.#ctor(`0,`1,org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2})">
            <summary>
            Creates a new nested transaction.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="ParentTransaction"></param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Commit(System.String,System.Boolean)">
            <summary>
            Mark this transaction as committed.
            Will not invoke the OnDispose event to clean up the ressources
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true commit will be async; default: false</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Rollback(System.String,System.Boolean)">
            <summary>
            Mark this transaction as rolledback. Will invoke the event OnDispose to clean up ressources.
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true rollback will be async; default: false</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.BeginNestedTransaction(System.Boolean,System.Boolean,org.GraphDefined.Vanaheimr.Illias.Transactions.IsolationLevel,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a nested transaction having the given parameters.
            </summary>
            <param name="Distributed">Indicates that the nested transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that the nested transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of the nested transaction.</param>
            <param name="Name">A name or identification for the nested transaction.</param>
            <param name="TimeStamp">A timestamp.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.GetNestedTransaction">
            <summary>
            Return the current nested transaction.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.Dispose">
            <summary>
            Dispose this transaction
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction`3.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3._Transaction">
            <summary>
            The transaction causing this exception.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotBeginTransactionException`3">
            <summary>
            A transaction could not be started.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotBeginTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A transaction could not be started.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotCommitNestedTransactionException`3">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotCommitNestedTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotRolleBackNestedTransactionException`3">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.CouldNotRolleBackNestedTransactionException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyCommitedException`3">
            <summary>
            The transaction was already committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyCommitedException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRolledbackException`3">
            <summary>
            The transaction was already rolled back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRolledbackException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already rolled back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRunningException`3">
            <summary>
            The transaction is already running!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionAlreadyRunningException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is already running!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyCommittingException`3">
            <summary>
            The transaction is currently committing!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyCommittingException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently committing!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyRollingBackException`3">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionCurrentlyRollingBackException`3.#ctor(org.GraphDefined.Vanaheimr.Illias.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState">
            <summary>
            The state of a transaction.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Running">
            <summary>
            The transaction is still running.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.NestedTransaction">
            <summary>
            The transaction has nested transactions.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Committing">
            <summary>
            The transaction is currently comitting.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.Committed">
            <summary>
            The transaction was comitted.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.RollingBack">
            <summary>
            The transaction is currently rolling back.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Transactions.TransactionState.RolledBack">
            <summary>
            The transaction was rolled back.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Trinary">
            <summary>
            Trinary
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.DelegateHelpers">
            <summary>
            Delegate helpers.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.TypeHelpers">
            <summary>
            TypeHelpers
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.TypeHelpers.IsAnonymousType(System.Type)">
            <summary>
            Is the given type an anonymous type?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% are okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote._NumberOfYesVotes">
            <summary>
            The current number of vetos.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote._NumberOfNoVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="F:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.VoteEvaluator">
            <summary>
            A delegate to evaluate the result of the voting.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.TotalNumberOfVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.#ctor(org.GraphDefined.Vanaheimr.Illias.Votes.VoteEvaluator{System.Boolean})">
            <summary>
            An abstract boolean voting.
            </summary>
            <param name="VoteEvaluator">A delegate to evaluate the result of the voting.</param>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.ABooleanVote.VoteFor(System.Boolean)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.VoteEvaluator`1">
            <summary>
            A delegate for evaluating a vote based on the
            number of yes and no votes.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
            <param name="NumberOfYesVotes">The current number of yes votes.</param>
            <param name="NumberOfNoVotes">The current number of no votes.</param>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions">
            <summary>
            Extentions methods for the IVote interface.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.Yes(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.Ok(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.Allow(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.Accept(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow' or 'accept'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.No(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVoteExtentions.Deny(org.GraphDefined.Vanaheimr.Illias.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVote">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.IVote.TotalNumberOfVotes">
            <summary>
            The current number of votes.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1.VoteFor(`0)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.Votes.IVote`1.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.MajorityVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.MajorityVote.#ctor">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote.#ctor">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.Votes.VetoVote.Veto">
            <summary>
            Veto
            </summary>
        </member>
        <member name="T:org.GraphDefined.Vanaheimr.Illias.WebLink">
            <summary>
            A web link.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.WebLink.Text">
            <summary>
            The text of the WebLink.
            </summary>
        </member>
        <member name="P:org.GraphDefined.Vanaheimr.Illias.WebLink.Url">
            <summary>
            The URL of the WebLink.
            </summary>
        </member>
        <member name="M:org.GraphDefined.Vanaheimr.Illias.WebLink.#ctor(System.String,System.String)">
            <summary>
            Create a new web link.
            </summary>
            <param name="Text">The text of the WebLink.</param>
            <param name="Url">The URL of the WebLink.</param>
        </member>
    </members>
</doc>
